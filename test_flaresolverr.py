#!/usr/bin/env python3
"""
–¢–µ—Å—Ç FlareSolverr –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–Ω—Ç–∏–±–æ—Ç–∞ Ozon
"""

import asyncio
import json
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
PROXY_CONFIG = {
    'scheme': 'http',
    'host': 'p15184.ltespace.net',
    'port': 15184,
    'username': 'uek7t66y',
    'password': 'zbygddap'
}

# URL —Ç–æ–≤–∞—Ä–∞
TEST_PRODUCT_URL = "https://www.ozon.ru/product/termozashchitnyy-sprey-dlya-volos-uvlazhnyayushchiy-nesmyvaemyy-uhod-dlya-legkogo-2128381166/?__rr=3&at=EqtkV5nBRhyWXGM9iY1OEWVhDKJLXvsrZVAMkFZK70J2"

# FlareSolverr –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
FLARESOLVERR_URL = "http://localhost:8191/v1"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π URL FlareSolverr

async def test_flaresolverr_without_proxy():
    """–¢–µ—Å—Ç FlareSolverr –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    print("üî• –¢–ï–°–¢ FLARESOLVERR –ë–ï–ó –ü–†–û–ö–°–ò")
    print("-" * 40)
    
    try:
        payload = {
            "cmd": "request.get",
            "url": TEST_PRODUCT_URL,
            "maxTimeout": 60000,
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        }
        
        response = requests.post(FLARESOLVERR_URL, json=payload, timeout=70)
        
        if response.status_code == 200:
            result = response.json()
            
            if result.get('status') == 'ok':
                solution = result.get('solution', {})
                status_code = solution.get('status', 0)
                html = solution.get('response', '')
                
                print(f"‚úÖ FlareSolverr —Å—Ç–∞—Ç—É—Å: {status_code}")
                print(f"üìè –†–∞–∑–º–µ—Ä HTML: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                if status_code == 200:
                    if "ozon" in html.lower() and "product" in html.lower():
                        print("‚úÖ Ozon —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ FlareSolverr!")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        html_file = f"ozon_flaresolverr_no_proxy_{timestamp}.html"
                        with open(html_file, "w", encoding="utf-8") as f:
                            f.write(html)
                        print(f"üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {html_file}")
                        
                        return True, html
                    else:
                        print("‚ö†Ô∏è HTML –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ Ozon")
                        return False, html
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {status_code}")
                    return False, html
            else:
                print(f"‚ùå FlareSolverr –æ—à–∏–±–∫–∞: {result.get('message', 'Unknown error')}")
                return False, None
        else:
            print(f"‚ùå FlareSolverr —Å–µ—Ä–≤–µ—Ä –æ—à–∏–±–∫–∞: {response.status_code}")
            return False, None
            
    except requests.exceptions.ConnectionError:
        print("‚ùå FlareSolverr –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ FlareSolverr: docker run -p 8191:8191 ghcr.io/flaresolverr/flaresolverr:latest")
        return False, None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FlareSolverr: {e}")
        return False, None

async def test_flaresolverr_with_proxy():
    """–¢–µ—Å—Ç FlareSolverr —Å –ø—Ä–æ–∫—Å–∏"""
    print("\nüî• –¢–ï–°–¢ FLARESOLVERR –° –ü–†–û–ö–°–ò")
    print("-" * 40)
    
    try:
        proxy_url = f"http://{PROXY_CONFIG['username']}:{PROXY_CONFIG['password']}@{PROXY_CONFIG['host']}:{PROXY_CONFIG['port']}"
        
        payload = {
            "cmd": "request.get",
            "url": TEST_PRODUCT_URL,
            "maxTimeout": 60000,
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "proxy": {
                "url": proxy_url
            }
        }
        
        response = requests.post(FLARESOLVERR_URL, json=payload, timeout=70)
        
        if response.status_code == 200:
            result = response.json()
            
            if result.get('status') == 'ok':
                solution = result.get('solution', {})
                status_code = solution.get('status', 0)
                html = solution.get('response', '')
                
                print(f"‚úÖ FlareSolverr —Å –ø—Ä–æ–∫—Å–∏ —Å—Ç–∞—Ç—É—Å: {status_code}")
                print(f"üìè –†–∞–∑–º–µ—Ä HTML: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                if status_code == 200:
                    if "ozon" in html.lower() and "product" in html.lower():
                        print("‚úÖ Ozon —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ FlareSolverr —Å –ø—Ä–æ–∫—Å–∏!")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        html_file = f"ozon_flaresolverr_with_proxy_{timestamp}.html"
                        with open(html_file, "w", encoding="utf-8") as f:
                            f.write(html)
                        print(f"üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {html_file}")
                        
                        return True, html
                    else:
                        print("‚ö†Ô∏è HTML –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ Ozon")
                        return False, html
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {status_code}")
                    return False, html
            else:
                print(f"‚ùå FlareSolverr –æ—à–∏–±–∫–∞: {result.get('message', 'Unknown error')}")
                return False, None
        else:
            print(f"‚ùå FlareSolverr —Å–µ—Ä–≤–µ—Ä –æ—à–∏–±–∫–∞: {response.status_code}")
            return False, None
            
    except requests.exceptions.ConnectionError:
        print("‚ùå FlareSolverr –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
        return False, None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FlareSolverr: {e}")
        return False, None

async def test_selenium_undetected():
    """–¢–µ—Å—Ç Selenium —Å undetected-chromedriver"""
    print("\nü§ñ –¢–ï–°–¢ SELENIUM UNDETECTED-CHROMEDRIVER")
    print("-" * 40)
    
    try:
        import undetected_chromedriver as uc
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        from selenium.common.exceptions import TimeoutException
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
        options = uc.ChromeOptions()
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        proxy_url = f"{PROXY_CONFIG['host']}:{PROXY_CONFIG['port']}"
        options.add_argument(f'--proxy-server=http://{PROXY_CONFIG['username']}:{PROXY_CONFIG['password']}@{proxy_url}')
        
        print("üöÄ –ó–∞–ø—É—Å–∫ Chrome...")
        driver = uc.Chrome(options=options)
        
        try:
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {TEST_PRODUCT_URL}")
            driver.get(TEST_PRODUCT_URL)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            wait = WebDriverWait(driver, 30)
            
            try:
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                
                # –ü–æ–ª—É—á–∞–µ–º HTML
                html = driver.page_source
                print(f"üìè –†–∞–∑–º–µ—Ä HTML: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                if "ozon" in html.lower() and "product" in html.lower():
                    print("‚úÖ Ozon —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ Selenium!")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    html_file = f"ozon_selenium_uc_{timestamp}.html"
                    with open(html_file, "w", encoding="utf-8") as f:
                        f.write(html)
                    print(f"üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {html_file}")
                    
                    return True, html
                else:
                    print("‚ö†Ô∏è HTML –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ Ozon")
                    return False, html
                    
            except TimeoutException:
                print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                return False, None
                
        finally:
            driver.quit()
            
    except ImportError:
        print("‚ùå undetected-chromedriver –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install undetected-chromedriver")
        return False, None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Selenium: {e}")
        return False, None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî• –¢–ï–°–¢ FLARESOLVERR –ò SELENIUM –î–õ–Ø OZON")
    print("=" * 50)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ü—Ä–æ–∫—Å–∏: {PROXY_CONFIG['host']}:{PROXY_CONFIG['port']}")
    print(f"üì¶ URL: {TEST_PRODUCT_URL}")
    print("=" * 50)
    
    results = {
        'timestamp': datetime.now().isoformat(),
        'flaresolverr_no_proxy': False,
        'flaresolverr_with_proxy': False,
        'selenium_uc': False,
        'html_files': []
    }
    
    # –¢–µ—Å—Ç 1: FlareSolverr –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    success, html = await test_flaresolverr_without_proxy()
    results['flaresolverr_no_proxy'] = success
    if html:
        results['html_files'].append('flaresolverr_no_proxy')
    
    # –¢–µ—Å—Ç 2: FlareSolverr —Å –ø—Ä–æ–∫—Å–∏
    success, html = await test_flaresolverr_with_proxy()
    results['flaresolverr_with_proxy'] = success
    if html:
        results['html_files'].append('flaresolverr_with_proxy')
    
    # –¢–µ—Å—Ç 3: Selenium undetected-chromedriver
    success, html = await test_selenium_undetected()
    results['selenium_uc'] = success
    if html:
        results['html_files'].append('selenium_uc')
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    print(f"üî• FlareSolverr –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if results['flaresolverr_no_proxy'] else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"üî• FlareSolverr —Å –ø—Ä–æ–∫—Å–∏: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if results['flaresolverr_with_proxy'] else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"ü§ñ Selenium UC: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if results['selenium_uc'] else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    
    success_count = sum([results['flaresolverr_no_proxy'], results['flaresolverr_with_proxy'], results['selenium_uc']])
    
    if success_count > 0:
        print(f"\nüéâ –£–°–ü–ï–•! {success_count}/3 –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç!")
        print("üí° –ê–Ω—Ç–∏–±–æ—Ç Ozon –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏!")
        
        if results['flaresolverr_no_proxy'] or results['flaresolverr_with_proxy']:
            print("üî• –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FlareSolverr")
        if results['selenium_uc']:
            print("ü§ñ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Selenium undetected-chromedriver")
    else:
        print("\n‚ùå –í–°–ï –ú–ï–¢–û–î–´ –ù–ï –†–ê–ë–û–¢–ê–Æ–¢!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ FlareSolverr: docker run -p 8191:8191 ghcr.io/flaresolverr/flaresolverr:latest")
        print("   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ undetected-chromedriver: pip install undetected-chromedriver")
        print("   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–∫—Å–∏")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    result_file = f"flaresolverr_test_result_{timestamp}.json"
    
    with open(result_file, "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {result_file}")

if __name__ == "__main__":
    asyncio.run(main())
