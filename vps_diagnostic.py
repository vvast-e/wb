#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è VPS —Å–µ—Ä–≤–µ—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ Ozon
"""

import os
import sys
import subprocess
import platform
import psutil
import asyncio
import aiohttp
import time
from datetime import datetime

class VPSDiagnostic:
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ VPS —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ Ozon"""
    
    def __init__(self):
        self.results = {}
        self.errors = []
        self.warnings = []
        
    def print_header(self, title: str):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print(f"\n{'='*60}")
        print(f"üîç {title}")
        print(f"{'='*60}")
    
    def print_result(self, name: str, status: str, details: str = ""):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        icon = "‚úÖ" if status == "OK" else "‚ùå" if status == "ERROR" else "‚ö†Ô∏è"
        print(f"{icon} {name}: {status}")
        if details:
            print(f"   üìù {details}")
        self.results[name] = status
    
    def check_system_info(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        self.print_header("–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
        
        # OS
        os_info = f"{platform.system()} {platform.release()}"
        self.print_result("–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "OK", os_info)
        
        # Python
        python_version = f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
        self.print_result("Python –≤–µ—Ä—Å–∏—è", "OK", python_version)
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
        arch = platform.architecture()[0]
        self.print_result("–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "OK", arch)
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        uptime = time.time() - psutil.boot_time()
        uptime_hours = int(uptime // 3600)
        self.print_result("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞", "OK", f"{uptime_hours} —á–∞—Å–æ–≤")
    
    def check_system_resources(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.print_header("–°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´")
        
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        cpu_count = psutil.cpu_count()
        self.print_result("CPU", "OK", f"{cpu_count} —è–¥–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞: {cpu_percent}%")
        
        # RAM
        memory = psutil.virtual_memory()
        ram_gb = memory.total / (1024**3)
        ram_used_gb = memory.used / (1024**3)
        ram_percent = memory.percent
        self.print_result("RAM", "OK" if ram_percent < 80 else "WARNING", 
                         f"{ram_gb:.1f} GB –≤—Å–µ–≥–æ, {ram_used_gb:.1f} GB –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ({ram_percent}%)")
        
        # Disk
        disk = psutil.disk_usage('/')
        disk_gb = disk.total / (1024**3)
        disk_free_gb = disk.free / (1024**3)
        disk_percent = (disk.used / disk.total) * 100
        self.print_result("–î–∏—Å–∫", "OK" if disk_percent < 90 else "WARNING",
                         f"{disk_gb:.1f} GB –≤—Å–µ–≥–æ, {disk_free_gb:.1f} GB —Å–≤–æ–±–æ–¥–Ω–æ ({disk_percent:.1f}%)")
        
        # Swap
        try:
            swap = psutil.swap_memory()
            if swap.total > 0:
                swap_gb = swap.total / (1024**3)
                swap_used_gb = swap.used / (1024**3)
                self.print_result("Swap", "OK", f"{swap_gb:.1f} GB –≤—Å–µ–≥–æ, {swap_used_gb:.1f} GB –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ")
            else:
                self.print_result("Swap", "WARNING", "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except:
            self.print_result("Swap", "ERROR", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å")
    
    def check_python_packages(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤"""
        self.print_header("PYTHON –ü–ê–ö–ï–¢–´")
        
        required_packages = [
            'selenium', 'selenium-wire', 'undetected-chromedriver',
            'beautifulsoup4', 'lxml', 'aiohttp', 'psutil'
        ]
        
        for package in required_packages:
            try:
                __import__(package.replace('-', '_'))
                self.print_result(f"–ü–∞–∫–µ—Ç {package}", "OK")
            except ImportError:
                self.print_result(f"–ü–∞–∫–µ—Ç {package}", "ERROR", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.errors.append(f"–ü–∞–∫–µ—Ç {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def check_chrome_installation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chrome"""
        self.print_header("CHROME –ë–†–ê–£–ó–ï–†")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Chrome
        try:
            result = subprocess.run(['google-chrome', '--version'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                version = result.stdout.strip()
                self.print_result("Google Chrome", "OK", version)
            else:
                self.print_result("Google Chrome", "ERROR", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                self.errors.append("Google Chrome –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except FileNotFoundError:
            self.print_result("Google Chrome", "ERROR", "–ù–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            self.errors.append("Google Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        except subprocess.TimeoutExpired:
            self.print_result("Google Chrome", "ERROR", "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")
            self.errors.append("Google Chrome —Ç–∞–π–º–∞—É—Ç")
    
    def check_chromedriver(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ ChromeDriver"""
        self.print_header("CHROMEDRIVER")
        
        try:
            result = subprocess.run(['chromedriver', '--version'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                version = result.stdout.strip()
                self.print_result("ChromeDriver", "OK", version)
            else:
                self.print_result("ChromeDriver", "ERROR", "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                self.errors.append("ChromeDriver –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except FileNotFoundError:
            self.print_result("ChromeDriver", "ERROR", "–ù–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            self.errors.append("ChromeDriver –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        except subprocess.TimeoutExpired:
            self.print_result("ChromeDriver", "ERROR", "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")
            self.errors.append("ChromeDriver —Ç–∞–π–º–∞—É—Ç")
    
    def check_proxy_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ü–†–û–ö–°–ò")
        
        # –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        proxy_host = os.getenv('OZON_PROXY_HOST', 'p15184.ltespace.net')
        proxy_port = os.getenv('OZON_PROXY_PORT', '15184')
        proxy_user = os.getenv('OZON_PROXY_USERNAME', 'uek7t66y')
        proxy_pass = os.getenv('OZON_PROXY_PASSWORD', 'zbygddap')
        
        proxy_url = f"http://{proxy_user}:{proxy_pass}@{proxy_host}:{proxy_port}"
        
        print(f"üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_host}:{proxy_port}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {proxy_user}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ curl
        try:
            result = subprocess.run([
                'curl', '-x', proxy_url, '--connect-timeout', '30',
                '--max-time', '60', 'https://ifconfig.me'
            ], capture_output=True, text=True, timeout=70)
            
            if result.returncode == 0:
                ip = result.stdout.strip()
                self.print_result("–ü—Ä–æ–∫—Å–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "OK", f"IP: {ip}")
            else:
                error = result.stderr.strip()
                self.print_result("–ü—Ä–æ–∫—Å–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "ERROR", f"–û—à–∏–±–∫–∞: {error}")
                self.errors.append(f"–ü—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {error}")
                
        except FileNotFoundError:
            self.print_result("–ü—Ä–æ–∫—Å–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞", "WARNING", "curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.TimeoutExpired:
            self.print_result("–ü—Ä–æ–∫—Å–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "ERROR", "–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            self.errors.append("–ü—Ä–æ–∫—Å–∏ —Ç–∞–π–º–∞—É—Ç")
    
    def check_network_connectivity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.print_header("–°–ï–¢–ï–í–û–ï –°–û–ï–î–ò–ù–ï–ù–ò–ï")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
        try:
            result = subprocess.run(['nslookup', 'www.ozon.ru'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                self.print_result("DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥", "OK", "ozon.ru –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                self.print_result("DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥", "ERROR", "ozon.ru –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.errors.append("DNS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except FileNotFoundError:
            self.print_result("DNS –ø—Ä–æ–≤–µ—Ä–∫–∞", "WARNING", "nslookup –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.TimeoutExpired:
            self.print_result("DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥", "ERROR", "–¢–∞–π–º–∞—É—Ç")
            self.errors.append("DNS —Ç–∞–π–º–∞—É—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
        try:
            result = subprocess.run(['ping', '-c', '3', '8.8.8.8'], 
                                  capture_output=True, text=True, timeout=15)
            if result.returncode == 0:
                self.print_result("Ping Google DNS", "OK", "–°–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                self.print_result("Ping Google DNS", "ERROR", "–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                self.errors.append("–°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except FileNotFoundError:
            self.print_result("Ping –ø—Ä–æ–≤–µ—Ä–∫–∞", "WARNING", "ping –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.TimeoutExpired:
            self.print_result("Ping Google DNS", "ERROR", "–¢–∞–π–º–∞—É—Ç")
            self.errors.append("Ping —Ç–∞–π–º–∞—É—Ç")
    
    def check_selenium_test(self):
        """–¢–µ—Å—Ç Selenium"""
        self.print_header("–¢–ï–°–¢ SELENIUM")
        
        try:
            from selenium import webdriver
            from selenium.webdriver.chrome.options import Options
            
            options = Options()
            options.add_argument('--headless')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            
            driver = webdriver.Chrome(options=options)
            driver.get("https://www.google.com")
            title = driver.title
            driver.quit()
            
            self.print_result("Selenium —Ç–µ—Å—Ç", "OK", f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            
        except Exception as e:
            self.print_result("Selenium —Ç–µ—Å—Ç", "ERROR", str(e))
            self.errors.append(f"Selenium –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
    
    def check_undetected_chromedriver(self):
        """–¢–µ—Å—Ç Undetected ChromeDriver"""
        self.print_header("–¢–ï–°–¢ UNDETECTED CHROMEDRIVER")
        
        try:
            import undetected_chromedriver as uc
            
            options = uc.ChromeOptions()
            options.add_argument('--headless')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            
            driver = uc.Chrome(options=options)
            driver.get("https://www.google.com")
            title = driver.title
            driver.quit()
            
            self.print_result("Undetected ChromeDriver", "OK", f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            
        except Exception as e:
            self.print_result("Undetected ChromeDriver", "ERROR", str(e))
            self.errors.append(f"Undetected ChromeDriver –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        self.print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        
        total_checks = len(self.results)
        ok_checks = sum(1 for status in self.results.values() if status == "OK")
        error_checks = sum(1 for status in self.results.values() if status == "ERROR")
        warning_checks = sum(1 for status in self.results.values() if status == "WARNING")
        
        print(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {ok_checks}")
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_checks}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {error_checks}")
        
        if self.errors:
            print(f"\nüî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:")
            for error in self.errors:
                print(f"   ‚Ä¢ {error}")
        
        if self.warnings:
            print(f"\nüü° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in self.warnings:
                print(f"   ‚Ä¢ {warning}")
        
        if not self.errors:
            print(f"\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("–í–∞—à VPS –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –ø–∞—Ä—Å–µ—Ä–æ–º Ozon!")
        else:
            print(f"\nüîß –ù–ï–û–ë–•–û–î–ò–ú–û –ò–°–ü–†–ê–í–ò–¢–¨:")
            print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã")
            print("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Chrome/ChromeDriver")
            print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            print("4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print("üöÄ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò VPS –°–ï–†–í–ï–†–ê")
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        try:
            self.check_system_info()
            self.check_system_resources()
            self.check_python_packages()
            self.check_chrome_installation()
            self.check_chromedriver()
            self.check_proxy_connection()
            self.check_network_connectivity()
            self.check_selenium_test()
            self.check_undetected_chromedriver()
            
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: {e}")
            self.errors.append(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        
        finally:
            self.generate_report()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    diagnostic = VPSDiagnostic()
    diagnostic.run_all_checks()

if __name__ == "__main__":
    main()



