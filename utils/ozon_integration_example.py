#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Ozon Mobile Stealth Parser —Å –ø—Ä–æ–µ–∫—Ç–æ–º WB_API

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ü–µ–Ω Ozon
–≤ —Ä–∞–º–∫–∞—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
"""

import asyncio
import json
import os
from datetime import datetime
from typing import Dict, List, Optional

from utils.ozon_mobile_stealth_parser import OzonMobileStealthParser
from utils.ozon_mobile_config import get_regional_profile, OzonMobileConfig


class OzonDataCollector:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å Ozon"""
    
    def __init__(self, proxy_config: Optional[Dict] = None, region: str = 'moscow'):
        """
        proxy_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
        region: –†–µ–≥–∏–æ–Ω –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ (moscow, spb, ekaterinburg, novosibirsk)
        """
        self.proxy_config = proxy_config or self._load_proxy_from_env()
        self.region = region
        self.results_cache = {}
    
    def _load_proxy_from_env(self) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        host = os.getenv('OZON_PROXY_HOST')
        port = os.getenv('OZON_PROXY_PORT')
        username = os.getenv('OZON_PROXY_USERNAME')
        password = os.getenv('OZON_PROXY_PASSWORD')
        scheme = os.getenv('OZON_PROXY_SCHEME', 'http')
        
        if host and port:
            return {
                'scheme': scheme,
                'host': host,
                'port': int(port),
                'username': username,
                'password': password
            }
        return None
    
    async def collect_product_data(self, product_urls: List[str], 
                                 include_reviews: bool = True,
                                 include_prices: bool = True,
                                 max_review_pages: int = 3) -> List[Dict]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ Ozon
        
        Args:
            product_urls: –°–ø–∏—Å–æ–∫ URL —Ç–æ–≤–∞—Ä–æ–≤
            include_reviews: –°–æ–±–∏—Ä–∞—Ç—å –ª–∏ –æ—Ç–∑—ã–≤—ã
            include_prices: –°–æ–±–∏—Ä–∞—Ç—å –ª–∏ —Ü–µ–Ω—ã
            max_review_pages: –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü –æ—Ç–∑—ã–≤–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
        """
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(product_urls)} —Ç–æ–≤–∞—Ä–æ–≤ Ozon")
        print(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –æ—Ç–∑—ã–≤—ã={include_reviews}, —Ü–µ–Ω—ã={include_prices}")
        
        results = []
        
        async with OzonMobileStealthParser(self.proxy_config) as parser:
            for i, url in enumerate(product_urls, 1):
                print(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ {i}/{len(product_urls)}: {url}")
                
                try:
                    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    product_data = {
                        'url': url,
                        'product_id': parser._extract_product_id(url),
                        'collected_at': datetime.now().isoformat(),
                        'region': self.region,
                        'success': True,
                        'error': None
                    }
                    
                    # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—É
                    if include_prices:
                        print("üí∞ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–µ...")
                        price_info = await parser.get_product_price(url)
                        product_data['price_info'] = price_info
                        
                        if price_info:
                            print(f"‚úÖ –¶–µ–Ω–∞: {price_info.get('current_price')} —Ä—É–±.")
                        else:
                            print("‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–∑—ã–≤—ã
                    if include_reviews:
                        print(f"üìù –°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ (–¥–æ {max_review_pages} —Å—Ç—Ä–∞–Ω–∏—Ü)...")
                        reviews = await parser.get_product_reviews(url, max_review_pages)
                        product_data['reviews'] = reviews
                        product_data['reviews_count'] = len(reviews)
                        
                        if reviews:
                            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            ratings = [r['rating'] for r in reviews if r.get('rating')]
                            if ratings:
                                product_data['average_rating'] = round(sum(ratings) / len(ratings), 2)
                                product_data['rating_distribution'] = self._calculate_rating_distribution(ratings)
                            
                            print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤, —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {product_data.get('average_rating', 'N/A')}")
                        else:
                            print("‚ö†Ô∏è –û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    results.append(product_data)
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
                    if i < len(product_urls):
                        delay = self._calculate_delay(i, len(product_urls))
                        print(f"‚è≥ –ü–∞—É–∑–∞ {delay}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–æ–≤–∞—Ä–æ–º...")
                        await asyncio.sleep(delay)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {url}: {e}")
                    results.append({
                        'url': url,
                        'success': False,
                        'error': str(e),
                        'collected_at': datetime.now().isoformat()
                    })
        
        print(f"\nüéâ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω: {len(results)} —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return results
    
    def _calculate_rating_distribution(self, ratings: List[int]) -> Dict[str, int]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        distribution = {str(i): 0 for i in range(1, 6)}
        for rating in ratings:
            if 1 <= rating <= 5:
                distribution[str(rating)] += 1
        return distribution
    
    def _calculate_delay(self, current: int, total: int) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        import random
        
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        base_delay = random.uniform(3.0, 6.0)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∫–∞–∂–¥—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
        if current % 10 == 0:
            base_delay += random.uniform(5.0, 10.0)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π
        if current > total * 0.7:
            base_delay += random.uniform(2.0, 5.0)
        
        return base_delay
    
    def save_results_to_json(self, results: List[Dict], filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"ozon_data_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    def generate_summary_report(self, results: List[Dict]) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
        total_products = len(results)
        successful = len([r for r in results if r.get('success', False)])
        failed = total_products - successful
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
        prices = [r.get('price_info', {}).get('current_price') for r in results if r.get('price_info')]
        prices = [p for p in prices if p is not None]
        
        price_stats = {}
        if prices:
            price_stats = {
                'min_price': min(prices),
                'max_price': max(prices),
                'avg_price': round(sum(prices) / len(prices), 2),
                'count': len(prices)
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–∑—ã–≤–∞–º
        all_reviews = []
        for result in results:
            if result.get('reviews'):
                all_reviews.extend(result['reviews'])
        
        review_stats = {
            'total_reviews': len(all_reviews),
            'products_with_reviews': len([r for r in results if r.get('reviews_count', 0) > 0])
        }
        
        if all_reviews:
            ratings = [r['rating'] for r in all_reviews if r.get('rating')]
            if ratings:
                review_stats.update({
                    'avg_rating': round(sum(ratings) / len(ratings), 2),
                    'rating_distribution': self._calculate_rating_distribution(ratings)
                })
        
        return {
            'collection_summary': {
                'total_products': total_products,
                'successful': successful,
                'failed': failed,
                'success_rate': round(successful / total_products * 100, 2) if total_products > 0 else 0,
                'collected_at': datetime.now().isoformat(),
                'region': self.region
            },
            'price_statistics': price_stats,
            'review_statistics': review_stats
        }


async def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
    proxy_config = {
        'scheme': 'http',
        'host': 'your.mobile.proxy.host',
        'port': 8080,
        'username': 'your_username',
        'password': 'your_password'
    }
    
    # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ URL)
    product_urls = [
        "https://www.ozon.ru/product/example-product-1-123456/",
        "https://www.ozon.ru/product/example-product-2-789012/",
        "https://www.ozon.ru/product/example-product-3-345678/",
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    collector = OzonDataCollector(proxy_config, region='moscow')
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    results = await collector.collect_product_data(
        product_urls=product_urls,
        include_reviews=True,
        include_prices=True,
        max_review_pages=3
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    collector.save_results_to_json(results)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = collector.generate_summary_report(results)
    
    print("\nüìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {report['collection_summary']['successful']}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {report['collection_summary']['failed']}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {report['collection_summary']['success_rate']}%")
    
    if report['price_statistics']:
        ps = report['price_statistics']
        print(f"üí∞ –¶–µ–Ω—ã: –æ—Ç {ps['min_price']} –¥–æ {ps['max_price']} —Ä—É–±. (—Å—Ä–µ–¥–Ω—è—è: {ps['avg_price']})")
    
    if report['review_statistics']['total_reviews'] > 0:
        rs = report['review_statistics']
        print(f"üìù –û—Ç–∑—ã–≤–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: {rs['total_reviews']}")
        if 'avg_rating' in rs:
            print(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rs['avg_rating']}/5")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º

async def parse_ozon_for_brand(brand_name: str, product_urls: List[str], 
                              proxy_config: Optional[Dict] = None) -> Dict:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ Ozon –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
    (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏—è–º –¥–ª—è WB –≤ –ø—Ä–æ–µ–∫—Ç–µ)
    """
    collector = OzonDataCollector(proxy_config)
    
    results = await collector.collect_product_data(
        product_urls=product_urls,
        include_reviews=True,
        include_prices=True
    )
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ WB_API
    adapted_results = {
        'brand': brand_name,
        'platform': 'ozon',
        'products': results,
        'summary': collector.generate_summary_report(results),
        'collected_at': datetime.now().isoformat()
    }
    
    return adapted_results


async def get_ozon_competitor_prices(competitor_urls: List[str],
                                   proxy_config: Optional[Dict] = None) -> List[Dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å Ozon
    (–¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤)
    """
    collector = OzonDataCollector(proxy_config)
    
    results = await collector.collect_product_data(
        product_urls=competitor_urls,
        include_reviews=False,
        include_prices=True
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö
    price_data = []
    for result in results:
        if result.get('success') and result.get('price_info'):
            price_data.append({
                'url': result['url'],
                'product_id': result['product_id'],
                'price_info': result['price_info'],
                'collected_at': result['collected_at']
            })
    
    return price_data


if __name__ == "__main__":
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Ozon –ø–∞—Ä—Å–µ—Ä–∞")
    asyncio.run(example_usage())
