#!/usr/bin/env python3
"""
üöÄ –°–£–ü–ï–†-–ü–ê–†–°–ï–† OZON —Å –ú–û–ë–ò–õ–¨–ù–û–ô –≠–ú–£–õ–Ø–¶–ò–ï–ô –ò STEALTH –¢–ï–•–ù–ò–ö–ê–ú–ò üöÄ

–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ 403 –∞–Ω—Ç–∏–±–æ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ.
–í–∫–ª—é—á–∞–µ—Ç:
- –≠–º—É–ª—è—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ Samsung Galaxy S21
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π TLS fingerprint —á–µ—Ä–µ–∑ curl_cffi
- –ü—Ä–æ–≥—Ä–µ–≤ —Å–µ—Å—Å–∏–∏ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∑–∞–ø—Ä–æ—Å–æ–≤
- Stealth —Ç–µ—Ö–Ω–∏–∫–∏ –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
- –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ü–µ–Ω —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–µ API
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
"""

import asyncio
import json
import os
import random
import time
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from urllib.parse import quote, urljoin, urlparse
import hashlib
import uuid

try:
    from curl_cffi import requests as curl_requests
    from curl_cffi.requests import Response
    HAS_CURL_CFFI = True
except ImportError:
    HAS_CURL_CFFI = False
    print("‚ùå curl_cffi –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install curl-cffi")

try:
    import httpx
    HAS_HTTPX = True
except ImportError:
    HAS_HTTPX = False

class OzonMobileStealthParser:
    """–°—É–ø–µ—Ä-–ø–∞—Ä—Å–µ—Ä Ozon —Å –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–µ–π –∏ stealth —Ç–µ—Ö–Ω–∏–∫–∞–º–∏"""
    
    def __init__(self, proxy_config: Optional[Dict] = None):
        """
        proxy_config = {
            'scheme': 'http',  # –∏–ª–∏ 'https', 'socks5'
            'host': 'your.proxy.host',
            'port': 8080,
            'username': 'user',
            'password': 'pass'
        }
        """
        self.proxy_config = proxy_config
        self.session = None
        self.cookies = {}
        self.device_id = str(uuid.uuid4())
        self.session_id = str(uuid.uuid4())
        
        # –ú–æ–±–∏–ª—å–Ω—ã–µ endpoints Ozon (–º–µ–Ω–µ–µ –∑–∞—â–∏—â–µ–Ω—ã)
        self.mobile_base = "https://www.ozon.ru"
        self.mobile_api = "https://www.ozon.ru/api"
        self.cdn_api = "https://cdn1.ozon.ru/api"
        
        # –≠–º—É–ª—è—Ü–∏—è Samsung Galaxy S21 (Android 12)
        self.mobile_headers = {
            'User-Agent': 'Mozilla/5.0 (Linux; Android 12; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.6099.210 Mobile Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Origin': 'https://www.ozon.ru',
            'Referer': 'https://www.ozon.ru/',
            'Sec-Fetch-Site': 'same-origin',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Dest': 'empty',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            # –ú–æ–±–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ Ozon
            'x-o3-app-name': 'mobile_web',
            'x-o3-app-version': '1.0.0',
            'x-o3-device-type': 'mobile',
            'x-o3-device-id': self.device_id,
            'x-o3-session-id': self.session_id,
            'x-requested-with': 'XMLHttpRequest',
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ stealth –∑–∞–≥–æ–ª–æ–≤–∫–∏
            'dnt': '1',
            'upgrade-insecure-requests': '1',
            'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
            'sec-ch-ua-mobile': '?1',
            'sec-ch-ua-platform': '"Android"',
        }
        
    def _build_proxy_url(self) -> Optional[str]:
        """–°–æ–±–∏—Ä–∞–µ—Ç URL –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        if not self.proxy_config:
            return None
        
        config = self.proxy_config
        auth = ""
        if config.get('username') and config.get('password'):
            auth = f"{config['username']}:{config['password']}@"
        
        return f"{config.get('scheme', 'http')}://{auth}{config['host']}:{config['port']}"
    
    async def __aenter__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        if not HAS_CURL_CFFI:
            raise ImportError("curl_cffi –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞!")
        
        proxy_url = self._build_proxy_url()
        proxies = None
        if proxy_url:
            proxies = {
                'http': proxy_url,
                'https': proxy_url
            }
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å —ç–º—É–ª—è—Ü–∏–µ–π Chrome –Ω–∞ Android
        self.session = curl_requests.Session(
            impersonate="chrome120_android",  # –í–∞–∂–Ω–æ: –º–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è!
            headers=self.mobile_headers,
            proxies=proxies,
            timeout=30,
            verify=True
        )
        
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ stealth –ø–∞—Ä—Å–µ—Ä–∞...")
        await self._warmup_session()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä—Å–µ—Ä–∞"""
        self.session = None
    
    async def _warmup_session(self):
        """–ü—Ä–æ–≥—Ä–µ–≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–Ω—Ç–∏–±–æ—Ç–∞"""
        print("üî• –ü—Ä–æ–≥—Ä–µ–≤ —Å–µ—Å—Å–∏–∏...")
        
        try:
            # 1. –ó–∞—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await self._safe_request('GET', self.mobile_base)
            await asyncio.sleep(random.uniform(2, 4))
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            await self._safe_request('GET', f"{self.mobile_base}/category")
            await asyncio.sleep(random.uniform(1, 3))
            
            # 3. –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookies –∏ —Ç–æ–∫–µ–Ω–æ–≤
            await self._safe_request('GET', f"{self.mobile_api}/composer-api.bx/_action/getInitialData")
            await asyncio.sleep(random.uniform(1, 2))
            
            print("‚úÖ –°–µ—Å—Å–∏—è –ø—Ä–æ–≥—Ä–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ —Å–µ—Å—Å–∏–∏: {e}")
    
    async def _safe_request(self, method: str, url: str, **kwargs) -> Optional[Response]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if method.upper() == 'GET':
                response = await asyncio.to_thread(self.session.get, url, **kwargs)
            elif method.upper() == 'POST':
                response = await asyncio.to_thread(self.session.post, url, **kwargs)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º cookies
            if hasattr(response, 'cookies'):
                self.cookies.update(response.cookies)
            
            return response
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {method} {url}: {e}")
            return None
    
    def _extract_product_id(self, product_url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL"""
        if '/product/' in product_url:
            parts = product_url.split('/product/')
            if len(parts) > 1:
                # –ò—â–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –≤ –∫–æ–Ω—Ü–µ URL
                product_part = parts[1].rstrip('/')
                # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç: "name-123456/" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "123456/"
                import re
                match = re.search(r'(\d+)/?$', product_part)
                if match:
                    return match.group(1)
        return None
    
    async def get_product_reviews(self, product_url: str, max_pages: int = 5) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ —Ç–æ–≤–∞—Ä–∞"""
        print(f"üìù –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤: {product_url}")
        
        product_id = self._extract_product_id(product_url)
        if not product_id:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç–æ–≤–∞—Ä–∞")
            return []
        
        all_reviews = []
        page = 1
        
        while page <= max_pages:
            print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
            
            # –ú–æ–±–∏–ª—å–Ω—ã–π API –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
            reviews_url = f"{self.mobile_api}/entrypoint-api.bx/page/json/v2"
            
            params = {
                'url': f'/product/{product_id}/reviews',
                'layout_container': 'reviewsShelfPaginator',
                'layout_page_index': page + 10,  # Ozon —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞
                'page': page,
                'reviewsVariantMode': '2',
                'sort': 'published_at_desc'
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–æ–±–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = self.mobile_headers.copy()
            headers['Referer'] = product_url
            
            response = await self._safe_request('GET', reviews_url, params=params, headers=headers)
            
            if not response or response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {response.status_code if response else 'No response'}")
                break
            
            try:
                data = response.json()
            except:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
                break
            
            page_reviews = self._parse_reviews_from_response(data)
            
            if not page_reviews:
                print("‚úÖ –û—Ç–∑—ã–≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
                break
            
            all_reviews.extend(page_reviews)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(page_reviews)} –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
            
            page += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(random.uniform(2, 4))
        
        print(f"üéâ –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(all_reviews)}")
        return all_reviews
    
    def _parse_reviews_from_response(self, data: Dict) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API"""
        reviews = []
        
        try:
            # –ü–æ–∏—Å–∫ –≤ widgetStates
            widget_states = data.get('widgetStates', {})
            
            for widget_id, widget_data in widget_states.items():
                if 'review' in widget_id.lower():
                    try:
                        if isinstance(widget_data, str):
                            widget_json = json.loads(widget_data)
                        else:
                            widget_json = widget_data
                        
                        reviews_list = widget_json.get('reviews', [])
                        
                        for review in reviews_list:
                            parsed = self._parse_single_review(review)
                            if parsed:
                                reviews.append(parsed)
                                
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–∞: {e}")
                        continue
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {e}")
        
        return reviews
    
    def _parse_single_review(self, review_data: Dict) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
        try:
            return {
                'id': review_data.get('uuid', ''),
                'author': review_data.get('author', {}).get('firstName', '–ê–Ω–æ–Ω–∏–º'),
                'text': review_data.get('content', {}).get('comment', ''),
                'rating': review_data.get('content', {}).get('score', 0),
                'date': review_data.get('publishedAt', ''),
                'pros': review_data.get('content', {}).get('pros', ''),
                'cons': review_data.get('content', {}).get('cons', ''),
                'useful_count': review_data.get('usefulness', {}).get('useful', 0),
                'is_anonymous': review_data.get('isAnonymous', False),
                'status': review_data.get('status', {}).get('name', '')
            }
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–∞: {e}")
            return None
    
    async def get_product_price(self, product_url: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
        print(f"üí∞ –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã: {product_url}")
        
        product_id = self._extract_product_id(product_url)
        if not product_id:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç–æ–≤–∞—Ä–∞")
            return None
        
        # –ú–æ–±–∏–ª—å–Ω—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
        price_url = f"{self.mobile_api}/entrypoint-api.bx/page/json/v2"
        
        params = {
            'url': f'/product/{product_id}',
            'layout_container': 'pdp',
            'layout_page_index': 1
        }
        
        headers = self.mobile_headers.copy()
        headers['Referer'] = self.mobile_base
        
        response = await self._safe_request('GET', price_url, params=params, headers=headers)
        
        if not response or response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {response.status_code if response else 'No response'}")
            return None
        
        try:
            data = response.json()
            return self._parse_price_from_response(data, product_id)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã: {e}")
            return None
    
    def _parse_price_from_response(self, data: Dict, product_id: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ API"""
        try:
            # –ü–æ–∏—Å–∫ –≤ widgetStates
            widget_states = data.get('widgetStates', {})
            
            for widget_id, widget_data in widget_states.items():
                if 'price' in widget_id.lower() or 'pdp' in widget_id.lower():
                    try:
                        if isinstance(widget_data, str):
                            widget_json = json.loads(widget_data)
                        else:
                            widget_json = widget_data
                        
                        # –ò—â–µ–º —Ü–µ–Ω—É –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö
                        price_info = self._extract_price_info(widget_json)
                        if price_info:
                            price_info['product_id'] = product_id
                            return price_info
                            
                    except Exception as e:
                        continue
            
            print("‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
            return None
    
    def _extract_price_info(self, data: Dict) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–µ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä"""
        price_info = {
            'current_price': None,
            'original_price': None,
            'discount_percent': None,
            'currency': 'RUB'
        }
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ü–µ–Ω–µ –≤ JSON
        price_paths = [
            ['price'],
            ['prices', 'price'],
            ['priceInfo', 'price'],
            ['finalPrice'],
            ['currentPrice'],
            ['price', 'final'],
            ['cardPrice'],
            ['ozonPrice']
        ]
        
        for path in price_paths:
            try:
                current = data
                for key in path:
                    current = current.get(key, {})
                
                if isinstance(current, (int, float, str)):
                    price_info['current_price'] = self._clean_price(current)
                    break
                elif isinstance(current, dict):
                    if 'value' in current:
                        price_info['current_price'] = self._clean_price(current['value'])
                        break
                    elif 'amount' in current:
                        price_info['current_price'] = self._clean_price(current['amount'])
                        break
            except:
                continue
        
        # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω—ã (–¥–ª—è —Å–∫–∏–¥–∫–∏)
        old_price_paths = [
            ['originalPrice'],
            ['oldPrice'],
            ['price', 'original'],
            ['basePrice'],
            ['listPrice']
        ]
        
        for path in old_price_paths:
            try:
                current = data
                for key in path:
                    current = current.get(key, {})
                
                if isinstance(current, (int, float, str)):
                    price_info['original_price'] = self._clean_price(current)
                    break
                elif isinstance(current, dict) and 'value' in current:
                    price_info['original_price'] = self._clean_price(current['value'])
                    break
            except:
                continue
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
        if price_info['current_price'] and price_info['original_price']:
            try:
                current = float(price_info['current_price'])
                original = float(price_info['original_price'])
                if original > current:
                    discount = ((original - current) / original) * 100
                    price_info['discount_percent'] = round(discount, 2)
            except:
                pass
        
        return price_info if price_info['current_price'] else None
    
    def _clean_price(self, price) -> Optional[float]:
        """–û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
        if price is None:
            return None
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ –æ—á–∏—â–∞–µ–º
            price_str = str(price).replace('‚ÇΩ', '').replace('—Ä—É–±', '').replace(' ', '').replace('\xa0', '')
            price_str = ''.join(c for c in price_str if c.isdigit() or c == '.')
            
            return float(price_str) if price_str else None
        except:
            return None
    
    async def get_product_full_info(self, product_url: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ (—Ü–µ–Ω–∞ + –æ—Ç–∑—ã–≤—ã)"""
        print(f"üîç –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞: {product_url}")
        
        result = {
            'url': product_url,
            'product_id': self._extract_product_id(product_url),
            'price_info': None,
            'reviews': [],
            'reviews_count': 0,
            'average_rating': 0,
            'parsed_at': datetime.now().isoformat()
        }
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏ –æ—Ç–∑—ã–≤—ã
        price_task = self.get_product_price(product_url)
        reviews_task = self.get_product_reviews(product_url)
        
        price_info, reviews = await asyncio.gather(price_task, reviews_task, return_exceptions=True)
        
        if not isinstance(price_info, Exception) and price_info:
            result['price_info'] = price_info
        
        if not isinstance(reviews, Exception) and reviews:
            result['reviews'] = reviews
            result['reviews_count'] = len(reviews)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            ratings = [r['rating'] for r in reviews if r.get('rating')]
            if ratings:
                result['average_rating'] = round(sum(ratings) / len(ratings), 2)
        
        return result
    
    async def parse_products_bulk(self, product_urls: List[str]) -> List[Dict]:
        """–ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        print(f"üöÄ –ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ {len(product_urls)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        results = []
        
        for i, url in enumerate(product_urls, 1):
            print(f"\nüì¶ –¢–æ–≤–∞—Ä {i}/{len(product_urls)}")
            
            try:
                result = await self.get_product_full_info(url)
                results.append(result)
                
                print(f"‚úÖ –¢–æ–≤–∞—Ä {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if i < len(product_urls):
                    delay = random.uniform(5, 10)
                    print(f"‚è≥ –ü–∞—É–∑–∞ {delay:.1f}—Å...")
                    await asyncio.sleep(delay)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {i}: {e}")
                results.append({
                    'url': url,
                    'error': str(e),
                    'parsed_at': datetime.now().isoformat()
                })
        
        print(f"\nüéâ –ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return results


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
async def parse_ozon_product_reviews(product_url: str, proxy_config: Optional[Dict] = None, max_pages: int = 5) -> List[Dict]:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    async with OzonMobileStealthParser(proxy_config) as parser:
        return await parser.get_product_reviews(product_url, max_pages)

async def parse_ozon_product_price(product_url: str, proxy_config: Optional[Dict] = None) -> Optional[Dict]:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã"""
    async with OzonMobileStealthParser(proxy_config) as parser:
        return await parser.get_product_price(product_url)

async def parse_ozon_product_full(product_url: str, proxy_config: Optional[Dict] = None) -> Dict:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞"""
    async with OzonMobileStealthParser(proxy_config) as parser:
        return await parser.get_product_full_info(product_url)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
    proxy_config = {
        'scheme': 'http',  # –∏–ª–∏ 'https', 'socks5'
        'host': os.getenv('OZON_PROXY_HOST', 'your.proxy.host'),
        'port': int(os.getenv('OZON_PROXY_PORT', '8080')),
        'username': os.getenv('OZON_PROXY_USERNAME', 'user'),
        'password': os.getenv('OZON_PROXY_PASSWORD', 'pass')
    }
    
    # –ü—Ä–∏–º–µ—Ä URL —Ç–æ–≤–∞—Ä–∞
    product_url = "https://www.ozon.ru/product/your-product-123456/"
    
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Ozon Mobile Stealth Parser")
    
    async with OzonMobileStealthParser(proxy_config) as parser:
        # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞
        result = await parser.get_product_full_info(product_url)
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê:")
        print(f"–¢–æ–≤–∞—Ä: {result['url']}")
        print(f"ID: {result['product_id']}")
        
        if result['price_info']:
            price = result['price_info']
            print(f"üí∞ –¶–µ–Ω–∞: {price['current_price']} {price['currency']}")
            if price['original_price']:
                print(f"üí∏ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {price['original_price']} {price['currency']}")
                print(f"üéØ –°–∫–∏–¥–∫–∞: {price['discount_percent']}%")
        
        print(f"üìù –û—Ç–∑—ã–≤–æ–≤: {result['reviews_count']}")
        if result['average_rating']:
            print(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {result['average_rating']}/5")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—Ç–∑—ã–≤–∞
        for i, review in enumerate(result['reviews'][:3], 1):
            print(f"\nüìÑ –û—Ç–∑—ã–≤ {i}:")
            print(f"   –ê–≤—Ç–æ—Ä: {review['author']}")
            print(f"   –†–µ–π—Ç–∏–Ω–≥: {review['rating']}/5")
            print(f"   –¢–µ–∫—Å—Ç: {review['text'][:100]}...")


if __name__ == "__main__":
    asyncio.run(main())
