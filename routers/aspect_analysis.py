from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import List, Optional, Dict
import json
import asyncio
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from database import get_db
from models.feedback import Feedback
from sqlalchemy import select
import logging
from utils.aspect_analyzer import aspect_analyzer
from utils.ai_aspect_analyzer import ai_aspect_analyzer

router = APIRouter(prefix="/aspect-analysis", tags=["aspect-analysis"])

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AspectAnalysisRequest(BaseModel):
    product_name: str
    feedback_ids: Optional[List[int]] = None
    limit: Optional[int] = 50  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 30 –¥–æ 50 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_mode: Optional[bool] = False  # –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–µ—Ä–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö

class AspectAnalysisResponse(BaseModel):
    general_dictionary: List[str]
    no_duplicates_dictionary: List[str]
    no_synonyms_dictionary: List[str]
    processing_time: float

class AspectDictionaryRequest(BaseModel):
    aspects: List[str]
    synonym_journal: List[str]

class SingleReviewAspectRequest(BaseModel):
    review_text: str
    rating: int

class SingleReviewAspectResponse(BaseModel):
    positive_aspects: List[str]
    negative_aspects: List[str]
    processing_time: float



@router.post("/analyze", response_model=AspectAnalysisResponse)
async def analyze_aspects(
    request: AspectAnalysisRequest,
    db: AsyncSession = Depends(get_db)
):
    """–ê–Ω–∞–ª–∏–∑ –∞—Å–ø–µ–∫—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤"""
    start_time = asyncio.get_event_loop().time()
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ò–ò
        if request.limit and request.limit > 50:
            logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {request.limit} –æ—Ç–∑—ã–≤–æ–≤, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã –ò–ò. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 30-50 –æ—Ç–∑—ã–≤–æ–≤.")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if request.feedback_ids:
            query = select(Feedback).where(Feedback.id.in_(request.feedback_ids))
        elif request.test_mode:
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –æ—Ç–∑—ã–≤—ã –∏–∑ –ë–î
            query = select(Feedback).order_by(Feedback.id.asc()).limit(request.limit)
            logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ {request.limit} –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –ë–î")
        else:
            query = select(Feedback).limit(request.limit)
        
        result = await db.execute(query)
        feedbacks = result.scalars().all()
        
        if not feedbacks:
            raise HTTPException(status_code=404, detail="–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(feedbacks)} –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{request.product_name}'")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        reviews_with_ratings = []
        for feedback in feedbacks:
            review_text = feedback.text or ""
            rating = feedback.rating or 0
            reviews_with_ratings.append(f"{review_text}; –û—Ü–µ–Ω–∫–∞ {rating}/5")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –ª–æ–∫–∞–ª—å–Ω—ã–π
        if ai_aspect_analyzer:
            try:
                analysis_result = await ai_aspect_analyzer.analyze_reviews(reviews_with_ratings, request.product_name)
                general_dict = analysis_result["general_dictionary"]
                no_duplicates_dict = analysis_result["no_duplicates_dictionary"]
                no_synonyms_dict = analysis_result["no_synonyms_dictionary"]
                logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—Å–ø–µ–∫—Ç–æ–≤")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π: {e}")
                analysis_result = await aspect_analyzer.analyze_reviews(reviews_with_ratings, request.product_name)
                general_dict = analysis_result["general_dictionary"]
                no_duplicates_dict = analysis_result["no_duplicates_dictionary"]
                no_synonyms_dict = analysis_result["no_synonyms_dictionary"]
        else:
            analysis_result = await aspect_analyzer.analyze_reviews(reviews_with_ratings, request.product_name)
            general_dict = analysis_result["general_dictionary"]
            no_duplicates_dict = analysis_result["no_duplicates_dictionary"]
            no_synonyms_dict = analysis_result["no_synonyms_dictionary"]
        
        processing_time = asyncio.get_event_loop().time() - start_time
        
        return AspectAnalysisResponse(
            general_dictionary=general_dict,
            no_duplicates_dictionary=no_duplicates_dict,
            no_synonyms_dictionary=no_synonyms_dict,
            processing_time=processing_time
        )
        
    except Exception as e:
        logger.error(f"Error in aspect analysis: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

@router.post("/analyze-single-review", response_model=SingleReviewAspectResponse)
async def analyze_single_review_aspects(
    request: SingleReviewAspectRequest
):
    """–ê–Ω–∞–ª–∏–∑ –∞—Å–ø–µ–∫—Ç–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
    start_time = asyncio.get_event_loop().time()

    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Å–ø–µ–∫—Ç—ã –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è –ò–ò, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if ai_aspect_analyzer:
            try:
                aspects_result = await ai_aspect_analyzer.analyze_single_review(
                    request.review_text, 
                    request.rating
                )
                logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π: {e}")
                aspects_result = await aspect_analyzer.analyze_single_review(
                    request.review_text, 
                    request.rating
                )
        else:
            aspects_result = await aspect_analyzer.analyze_single_review(
                request.review_text, 
                request.rating
            )

        processing_time = asyncio.get_event_loop().time() - start_time

        return SingleReviewAspectResponse(
            positive_aspects=aspects_result["positive"],
            negative_aspects=aspects_result["negative"],
            processing_time=processing_time
        )

    except Exception as e:
        logger.error(f"Error in single review analysis: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

@router.post("/generate-dictionary", response_model=List[str])
async def generate_dictionary(
    request: AspectDictionaryRequest,
    db: AsyncSession = Depends(get_db)
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –∞—Å–ø–µ–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –ª–æ–∫–∞–ª—å–Ω—ã–π
        if ai_aspect_analyzer:
            try:
                no_synonyms_dict = await ai_aspect_analyzer.generate_custom_dictionary(
                    request.aspects,
                    request.synonym_journal
                )
                logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤–∞—Ä—è")
                return no_synonyms_dict
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π: {e}")
                no_synonyms_dict = await aspect_analyzer.generate_custom_dictionary(
                    request.aspects,
                    request.synonym_journal
                )
                return no_synonyms_dict
        else:
            no_synonyms_dict = await aspect_analyzer.generate_custom_dictionary(
                request.aspects,
                request.synonym_journal
            )
            return no_synonyms_dict
        
    except Exception as e:
        logger.error(f"Error generating dictionary: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤–∞—Ä—è: {str(e)}")

@router.post("/test-first-30", response_model=AspectAnalysisResponse)
async def test_first_30_feedbacks(
    product_name: str = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
    db: AsyncSession = Depends(get_db)
):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ –ø–µ—Ä–≤—ã—Ö 30 –æ—Ç–∑—ã–≤–∞—Ö –∏–∑ –ë–î"""
    start_time = asyncio.get_event_loop().time()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 30 –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –ë–î
        query = select(Feedback).order_by(Feedback.id.asc()).limit(30)
        result = await db.execute(query)
        feedbacks = result.scalars().all()
        
        if not feedbacks:
            raise HTTPException(status_code=404, detail="–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
        
        logger.info(f"üß™ –¢–ï–°–¢: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ {len(feedbacks)} –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –ë–î")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        reviews_with_ratings = []
        for feedback in feedbacks:
            review_text = feedback.text or ""
            rating = feedback.rating or 0
            reviews_with_ratings.append(f"{review_text}; –û—Ü–µ–Ω–∫–∞ {rating}/5")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ò–ò
        if ai_aspect_analyzer:
            try:
                analysis_result = await ai_aspect_analyzer.analyze_reviews(reviews_with_ratings, product_name)
                general_dict = analysis_result["general_dictionary"]
                no_duplicates_dict = analysis_result["no_duplicates_dictionary"]
                no_synonyms_dict = analysis_result["no_synonyms_dictionary"]
                logger.info("‚úÖ –¢–ï–°–¢: –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –æ—Ç–∑—ã–≤—ã")
                
                # TODO: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å–ø–µ–∫—Ç—ã –≤ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞
                await _save_aspects_to_feedbacks(db, feedbacks, analysis_result)
                
            except Exception as e:
                logger.error(f"‚ùå –¢–ï–°–¢: –û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
                # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
                analysis_result = await aspect_analyzer.analyze_reviews(reviews_with_ratings, product_name)
                general_dict = analysis_result["general_dictionary"]
                no_duplicates_dict = analysis_result["no_duplicates_dictionary"]
                no_synonyms_dict = analysis_result["no_synonyms_dictionary"]
                logger.info("‚ö†Ô∏è –¢–ï–°–¢: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
        else:
            analysis_result = await aspect_analyzer.analyze_reviews(reviews_with_ratings, product_name)
            general_dict = analysis_result["general_dictionary"]
            no_duplicates_dict = analysis_result["no_duplicates_dictionary"]
            no_synonyms_dict = analysis_result["no_synonyms_dictionary"]
            logger.info("‚ö†Ô∏è –¢–ï–°–¢: –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π")
        
        processing_time = asyncio.get_event_loop().time() - start_time
        
        return AspectAnalysisResponse(
            general_dictionary=general_dict,
            no_duplicates_dictionary=no_duplicates_dict,
            no_synonyms_dictionary=no_synonyms_dict,
            processing_time=processing_time
        )
        
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢: –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

async def _save_aspects_to_feedbacks(db: AsyncSession, feedbacks: List[Feedback], analysis_result: Dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Å–ø–µ–∫—Ç–æ–≤ –≤ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å –∞—Å–ø–µ–∫—Ç–æ–≤
        all_aspects = analysis_result.get("no_synonyms_dictionary", [])
        
        for feedback in feedbacks:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ –∞—Å–ø–µ–∫—Ç–æ–≤
            if ai_aspect_analyzer:
                try:
                    single_result = await ai_aspect_analyzer.analyze_single_review(
                        feedback.text or "", 
                        feedback.rating or 0
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å–ø–µ–∫—Ç—ã –≤ JSON –ø–æ–ª–µ
                    feedback.aspects = {
                        "positive": single_result.get("positive", []),
                        "negative": single_result.get("negative", []),
                        "all_aspects": all_aspects,
                        "analyzed_at": datetime.now().isoformat()
                    }
                    
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤ {feedback.id}: {e}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ –∞—Å–ø–µ–∫—Ç—ã
                    feedback.aspects = {
                        "positive": [],
                        "negative": [],
                        "all_aspects": all_aspects,
                        "analyzed_at": datetime.now().isoformat(),
                        "error": str(e)
                    }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        await db.commit()
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞—Å–ø–µ–∫—Ç—ã –¥–ª—è {len(feedbacks)} –æ—Ç–∑—ã–≤–æ–≤ –≤ –ë–î")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Å–ø–µ–∫—Ç–æ–≤ –≤ –ë–î: {e}")
        await db.rollback()

@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy", "service": "aspect-analysis"}
