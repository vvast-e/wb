#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ OZON FLARESOLVERR –ü–ê–†–°–ï–†–ê üß™

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ Ozon —á–µ—Ä–µ–∑ FlareSolverr
"""

import asyncio
import json
import os
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
from utils.ozon_flaresolverr_parser import OzonFlareSolverrParser, parse_ozon_flaresolverr_full

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
PROXY_CONFIG = {
    'scheme': 'http',
    'host': 'p15184.ltespace.net',
    'port': 15184,
    'username': 'uek7t66y',
    'password': 'zbygddap'
}

# URL —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TEST_PRODUCT_URL = "https://www.ozon.ru/product/termozashchitnyy-sprey-dlya-volos-uvlazhnyayushchiy-nesmyvaemyy-uhod-dlya-legkogo-2128381166/?__rr=3&at=EqtkV5nBRhyWXGM9iY1OEWVhDKJLXvsrZVAMkFZK70J2"

async def test_proxy_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    print("üåê –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ü–†–û–ö–°–ò")
    print("-" * 50)
    
    try:
        import requests
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ httpbin.org
        proxy_url = f"http://{PROXY_CONFIG['username']}:{PROXY_CONFIG['password']}@{PROXY_CONFIG['host']}:{PROXY_CONFIG['port']}"
        proxies = {
            'http': proxy_url,
            'https': proxy_url
        }
        
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏: {PROXY_CONFIG['host']}:{PROXY_CONFIG['port']}")
        
        response = requests.get('https://httpbin.org/ip', proxies=proxies, timeout=10)
        
        if response.status_code == 200:
            ip_info = response.json()
            proxy_ip = ip_info.get('origin', 'Unknown')
            print(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! IP: {proxy_ip}")
            return True, proxy_ip
        else:
            print(f"‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
        return False, None

async def test_flaresolverr_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FlareSolverr"""
    print("üî• –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö FLARESOLVERR")
    print("-" * 50)
    
    try:
        async with OzonFlareSolverrParser(PROXY_CONFIG) as parser:
            print("‚úÖ FlareSolverr –ø–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FlareSolverr: {e}")
        return False

async def test_flaresolverr_without_proxy():
    """–¢–µ—Å—Ç FlareSolverr –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    print("üî• –¢–ï–°–¢ FLARESOLVERR –ë–ï–ó –ü–†–û–ö–°–ò")
    print("-" * 50)
    
    try:
        async with OzonFlareSolverrParser(None) as parser:  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
            print("‚úÖ FlareSolverr –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FlareSolverr –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {e}")
        return False

async def test_price_parsing_with_proxy():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã —Å –ø—Ä–æ–∫—Å–∏"""
    print("\nüí∞ –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –¶–ï–ù–´ –° –ü–†–û–ö–°–ò")
    print("-" * 50)
    
    try:
        async with OzonFlareSolverrParser(PROXY_CONFIG) as parser:
            price_info = await parser.get_product_price(TEST_PRODUCT_URL)
            
            if price_info:
                print("‚úÖ –¶–µ–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å –ø—Ä–æ–∫—Å–∏!")
                print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price_info['current_price']} {price_info['currency']}")
                if price_info.get('original_price'):
                    print(f"üí∏ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {price_info['original_price']} {price_info['currency']}")
                    print(f"üéØ –°–∫–∏–¥–∫–∞: {price_info['discount_percent']}%")
                return True, price_info
            else:
                print("‚ùå –¶–µ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å –ø—Ä–æ–∫—Å–∏")
                return False, None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã —Å –ø—Ä–æ–∫—Å–∏: {e}")
        return False, None

async def test_price_parsing_without_proxy():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    print("\nüí∞ –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –¶–ï–ù–´ –ë–ï–ó –ü–†–û–ö–°–ò")
    print("-" * 50)
    
    try:
        async with OzonFlareSolverrParser(None) as parser:  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
            price_info = await parser.get_product_price(TEST_PRODUCT_URL)
            
            if price_info:
                print("‚úÖ –¶–µ–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –±–µ–∑ –ø—Ä–æ–∫—Å–∏!")
                print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price_info['current_price']} {price_info['currency']}")
                if price_info.get('original_price'):
                    print(f"üí∏ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {price_info['original_price']} {price_info['currency']}")
                    print(f"üéØ –°–∫–∏–¥–∫–∞: {price_info['discount_percent']}%")
                return True, price_info
            else:
                print("‚ùå –¶–µ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
                return False, None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {e}")
        return False, None

async def test_reviews_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    print("\nüìù –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–û–í")
    print("-" * 50)
    
    try:
        async with OzonFlareSolverrParser(PROXY_CONFIG) as parser:
            reviews = await parser.get_product_reviews(TEST_PRODUCT_URL, max_pages=2)
            
            if reviews:
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—Ç–∑—ã–≤–∞
                for i, review in enumerate(reviews[:3], 1):
                    print(f"\nüìÑ –û—Ç–∑—ã–≤ {i}:")
                    print(f"   –ê–≤—Ç–æ—Ä: {review['author']}")
                    print(f"   –†–µ–π—Ç–∏–Ω–≥: {review['rating']}/5")
                    print(f"   –¢–µ–∫—Å—Ç: {review['text'][:100]}...")
                
                return True, reviews
            else:
                print("‚ùå –û—Ç–∑—ã–≤—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                return False, []
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        return False, []

async def test_full_parsing():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("\nüîç –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
    print("-" * 50)
    
    try:
        result = await parse_ozon_flaresolverr_full(TEST_PRODUCT_URL, PROXY_CONFIG)
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        print(f"üÜî ID —Ç–æ–≤–∞—Ä–∞: {result['product_id']}")
        print(f"üåê URL: {result['url']}")
        print(f"‚è∞ –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {result['parsed_at']}")
        
        if result['price_info']:
            price = result['price_info']
            print(f"üí∞ –¶–µ–Ω–∞: {price['current_price']} {price['currency']}")
            if price.get('original_price'):
                print(f"üí∏ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {price['original_price']} {price['currency']}")
                print(f"üéØ –°–∫–∏–¥–∫–∞: {price['discount_percent']}%")
        
        print(f"üìù –û—Ç–∑—ã–≤–æ–≤: {result['reviews_count']}")
        if result['average_rating']:
            print(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {result['average_rating']}/5")
        
        return True, result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return False, None

async def test_bulk_parsing():
    """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("\nüöÄ –¢–ï–°–¢ –ú–ê–°–°–û–í–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
    print("-" * 50)
    
    # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_urls = [
        TEST_PRODUCT_URL,
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ]
    
    try:
        async with OzonFlareSolverrParser(PROXY_CONFIG) as parser:
            results = await parser.parse_products_bulk(test_urls)
            
            print(f"‚úÖ –ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            for i, result in enumerate(results, 1):
                print(f"\nüì¶ –¢–æ–≤–∞—Ä {i}:")
                if 'error' in result:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                else:
                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    if result.get('price_info'):
                        print(f"   üí∞ –¶–µ–Ω–∞: {result['price_info']['current_price']} RUB")
                    print(f"   üìù –û—Ç–∑—ã–≤–æ–≤: {result['reviews_count']}")
            
            return True, results
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return False, []

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OZON FLARESOLVERR –ü–ê–†–°–ï–†–ê")
    print("=" * 60)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ü—Ä–æ–∫—Å–∏: {PROXY_CONFIG['host']}:{PROXY_CONFIG['port']}")
    print(f"üì¶ URL: {TEST_PRODUCT_URL}")
    print("=" * 60)
    
    results = {
        'timestamp': datetime.now().isoformat(),
        'proxy_test': False,
        'proxy_ip': None,
        'flaresolverr_with_proxy': False,
        'flaresolverr_without_proxy': False,
        'price_with_proxy': False,
        'price_without_proxy': False,
        'reviews_test': False,
        'full_test': False,
        'bulk_test': False,
        'price_data_with_proxy': None,
        'price_data_without_proxy': None,
        'reviews_data': None,
        'full_data': None,
        'bulk_data': None
    }
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏
    proxy_success, proxy_ip = await test_proxy_connection()
    results['proxy_test'] = proxy_success
    results['proxy_ip'] = proxy_ip
    
    # –¢–µ—Å—Ç 2: FlareSolverr —Å –ø—Ä–æ–∫—Å–∏
    results['flaresolverr_with_proxy'] = await test_flaresolverr_connection()
    
    # –¢–µ—Å—Ç 3: FlareSolverr –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    results['flaresolverr_without_proxy'] = await test_flaresolverr_without_proxy()
    
    if not results['flaresolverr_with_proxy'] and not results['flaresolverr_without_proxy']:
        print("\n‚ùå FlareSolverr –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("docker run -p 8191:8191 ghcr.io/flaresolverr/flaresolverr:latest")
        return
    
    # –¢–µ—Å—Ç 4: –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã —Å –ø—Ä–æ–∫—Å–∏
    if results['flaresolverr_with_proxy']:
        price_success, price_data = await test_price_parsing_with_proxy()
        results['price_with_proxy'] = price_success
        results['price_data_with_proxy'] = price_data
    
    # –¢–µ—Å—Ç 5: –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    if results['flaresolverr_without_proxy']:
        price_success, price_data = await test_price_parsing_without_proxy()
        results['price_without_proxy'] = price_success
        results['price_data_without_proxy'] = price_data
    
    # –¢–µ—Å—Ç 6: –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
    if results['price_with_proxy'] or results['price_without_proxy']:
        reviews_success, reviews_data = await test_reviews_parsing()
        results['reviews_test'] = reviews_success
        results['reviews_data'] = reviews_data
    
    # –¢–µ—Å—Ç 7: –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    full_success, full_data = await test_full_parsing()
    results['full_test'] = full_success
    results['full_data'] = full_data
    
    # –¢–µ—Å—Ç 8: –ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    bulk_success, bulk_data = await test_bulk_parsing()
    results['bulk_test'] = bulk_success
    results['bulk_data'] = bulk_data
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏", results['proxy_test']),
        ("FlareSolverr —Å –ø—Ä–æ–∫—Å–∏", results['flaresolverr_with_proxy']),
        ("FlareSolverr –±–µ–∑ –ø—Ä–æ–∫—Å–∏", results['flaresolverr_without_proxy']),
        ("–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã —Å –ø—Ä–æ–∫—Å–∏", results['price_with_proxy']),
        ("–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –±–µ–∑ –ø—Ä–æ–∫—Å–∏", results['price_without_proxy']),
        ("–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤", results['reviews_test']),
        ("–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥", results['full_test']),
        ("–ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥", results['bulk_test'])
    ]
    
    success_count = 0
    for test_name, success in tests:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –ù–ï–£–î–ê–ß–ù–û"
        print(f"{test_name}: {status}")
        if success:
            success_count += 1
    
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if success_count == len(tests):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üí° FlareSolverr –ø–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!")
    elif success_count > 0:
        print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•!")
        print("üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("‚ùå –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FlareSolverr –∏ –ø—Ä–æ–∫—Å–∏")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    result_file = f"flaresolverr_parser_test_result_{timestamp}.json"
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    save_results = results.copy()
    if save_results.get('full_data'):
        save_results['full_data'] = {
            'url': save_results['full_data']['url'],
            'product_id': save_results['full_data']['product_id'],
            'price_info': save_results['full_data']['price_info'],
            'reviews_count': save_results['full_data']['reviews_count'],
            'average_rating': save_results['full_data']['average_rating'],
            'parsed_at': save_results['full_data']['parsed_at']
        }
    
    with open(result_file, "w", encoding="utf-8") as f:
        json.dump(save_results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {result_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if results['full_test']:
        print("\n" + "=" * 60)
        print("üí° –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print("""
# –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã
from utils.ozon_flaresolverr_parser import parse_ozon_flaresolverr_price

price = await parse_ozon_flaresolverr_price(product_url, proxy_config)

# –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤
from utils.ozon_flaresolverr_parser import parse_ozon_flaresolverr_reviews

reviews = await parse_ozon_flaresolverr_reviews(product_url, proxy_config)

# –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
from utils.ozon_flaresolverr_parser import parse_ozon_flaresolverr_full

result = await parse_ozon_flaresolverr_full(product_url, proxy_config)
        """)

if __name__ == "__main__":
    asyncio.run(main())
