#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–º–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Ozon
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
"""

import asyncio
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
PROXY_CONFIG = {
    'scheme': 'http',
    'host': 'p15184.ltespace.net',
    'port': 15184,
    'username': 'uek7t66y',
    'password': 'zbygddap'
}

# URL —Ç–æ–≤–∞—Ä–∞
TEST_PRODUCT_URL = "https://www.ozon.ru/product/termozashchitnyy-sprey-dlya-volos-uvlazhnyayushchiy-nesmyvaemyy-uhod-dlya-legkogo-2128381166/?__rr=3&at=EqtkV5nBRhyWXGM9iY1OEWVhDKJLXvsrZVAMkFZK70J2"

async def test_page_dump():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–º–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    print("üåê –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ú–ü–ê –°–¢–†–ê–ù–ò–¶–´ OZON")
    print("=" * 50)
    print(f"üì¶ URL: {TEST_PRODUCT_URL}")
    print(f"üåê –ü—Ä–æ–∫—Å–∏: {PROXY_CONFIG['host']}:{PROXY_CONFIG['port']}")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ø–∞—Ä—Å–µ—Ä
        from utils.ozon_mobile_stealth_parser import OzonMobileStealthParser
        
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        async with OzonMobileStealthParser(PROXY_CONFIG) as parser:
            print("‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print("üî• –ü—Ä–æ–≥—Ä–µ–≤ —Å–µ—Å—Å–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–º–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–µ—Ä–∞
            print("\nüìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–º–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML
            response = await parser._safe_request('GET', TEST_PRODUCT_URL)
            
            if response and response.status_code == 200:
                print("‚úÖ –°–¢–†–ê–ù–ò–¶–ê –ü–û–õ–£–ß–ï–ù–ê –£–°–ü–ï–®–ù–û!")
                print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"üìè –†–∞–∑–º–µ—Ä: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–º–ø
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                dump_file = f"ozon_page_dump_{timestamp}.html"
                
                with open(dump_file, "w", encoding="utf-8") as f:
                    f.write(response.text)
                
                print(f"üíæ –î–∞–º–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {dump_file}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                content = response.text
                
                print("\nüîç –ê–ù–ê–õ–ò–ó –°–û–î–ï–†–ñ–ò–ú–û–ì–û:")
                print("-" * 30)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                checks = [
                    ("–æ—Ç–∑—ã–≤", "–æ—Ç–∑—ã–≤" in content.lower()),
                    ("review", "review" in content.lower()),
                    ("—Ü–µ–Ω–∞", "—Ü–µ–Ω–∞" in content.lower()),
                    ("price", "price" in content.lower()),
                    ("‚ÇΩ", "‚ÇΩ" in content),
                    ("—Ä—É–±", "—Ä—É–±" in content.lower()),
                    ("—Ä–µ–π—Ç–∏–Ω–≥", "—Ä–µ–π—Ç–∏–Ω–≥" in content.lower()),
                    ("rating", "rating" in content.lower()),
                    ("—Ç–æ–≤–∞—Ä", "—Ç–æ–≤–∞—Ä" in content.lower()),
                    ("product", "product" in content.lower()),
                ]
                
                for check_name, found in checks:
                    status = "‚úÖ" if found else "‚ùå"
                    print(f"   {status} {check_name}: {'–Ω–∞–π–¥–µ–Ω' if found else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                if "captcha" in content.lower() or "blocked" in content.lower():
                    print("\n‚ö†Ô∏è –í–û–ó–ú–û–ñ–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!")
                elif "403" in content or "forbidden" in content.lower():
                    print("\n‚ùå 403 FORBIDDEN –û–ë–ù–ê–†–£–ñ–ï–ù!")
                else:
                    print("\n‚úÖ –ë–õ–û–ö–ò–†–û–í–ö–ê –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ê!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö
                if '"reviews"' in content or '"price"' in content:
                    print("‚úÖ JSON –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ HTML")
                else:
                    print("‚ö†Ô∏è JSON –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ HTML")
                
                return True
                
            elif response:
                print(f"‚ùå –û–®–ò–ë–ö–ê: –°—Ç–∞—Ç—É—Å {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text[:500]}...")
                return False
            else:
                print("‚ùå –ù–ï–¢ –û–¢–í–ï–¢–ê –û–¢ –°–ï–†–í–ï–†–ê")
                return False
                
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_with_curl_cffi():
    """–¢–µ—Å—Ç —Å –ø—Ä—è–º—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º curl_cffi"""
    print("\nüîß –¢–ï–°–¢ –° –ü–†–Ø–ú–´–ú CURL_CFFI")
    print("-" * 40)
    
    try:
        from curl_cffi import requests as curl_requests
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        proxy_url = f"http://{PROXY_CONFIG['username']}:{PROXY_CONFIG['password']}@{PROXY_CONFIG['host']}:{PROXY_CONFIG['port']}"
        
        # –ú–æ–±–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            'User-Agent': 'Mozilla/5.0 (Linux; Android 12; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.6099.210 Mobile Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = curl_requests.Session(
            impersonate="chrome120_android",
            headers=headers,
            proxies={'http': proxy_url, 'https': proxy_url},
            timeout=30
        )
        
        print("‚úÖ curl_cffi —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = session.get(TEST_PRODUCT_URL)
        
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if response.status_code == 200:
            print("‚úÖ –£–°–ü–ï–®–ù–û! –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ curl_cffi")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–º–ø
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            dump_file = f"ozon_curl_dump_{timestamp}.html"
            
            with open(dump_file, "w", encoding="utf-8") as f:
                f.write(response.text)
            
            print(f"üíæ –î–∞–º–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {dump_file}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ curl_cffi: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–ú–ü–ê –°–¢–†–ê–ù–ò–¶–´ OZON")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –¢–µ—Å—Ç 1: –ß–µ—Ä–µ–∑ –Ω–∞—à –ø–∞—Ä—Å–µ—Ä
    success1 = await test_page_dump()
    
    # –¢–µ—Å—Ç 2: –ß–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π curl_cffi
    success2 = await test_with_curl_cffi()
    
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"‚úÖ –ù–∞—à –ø–∞—Ä—Å–µ—Ä: {'–£–°–ü–ï–®–ù–û' if success1 else '–ù–ï–£–î–ê–ß–ù–û'}")
    print(f"‚úÖ curl_cffi: {'–£–°–ü–ï–®–ù–û' if success2 else '–ù–ï–£–î–ê–ß–ù–û'}")
    
    if success1 or success2:
        print("\nüéâ –ó–ê–©–ò–¢–ê –û–ë–û–ô–î–ï–ù–ê!")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ HTML —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    else:
        print("\n‚ùå –ó–ê–©–ò–¢–ê –ù–ï –û–ë–û–ô–î–ï–ù–ê")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
        print("   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–æ–∫—Å–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π")
        print("   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π IP –∞–¥—Ä–µ—Å")

if __name__ == "__main__":
    asyncio.run(main())
