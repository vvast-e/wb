#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Ozon –ø–∞—Ä—Å–µ—Ä–∞
"""

import asyncio
import sys
import os

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        import curl_cffi
        print("‚úÖ curl_cffi —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå curl_cffi –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install curl-cffi")
        return False
    
    try:
        import httpx
        print("‚úÖ httpx —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå httpx –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install httpx")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞
    parser_file = "utils/ozon_mobile_stealth_parser.py"
    if os.path.exists(parser_file):
        print("‚úÖ –§–∞–π–ª –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"‚ùå –§–∞–π–ª –ø–∞—Ä—Å–µ—Ä–∞ –ù–ï –ù–ê–ô–î–ï–ù: {parser_file}")
        return False
    
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í OZON –ü–ê–†–°–ï–†–ê")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        print("\n‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
    print("1. –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("2. –¢–µ—Å—Ç –¥–∞–º–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    print("3. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")
    print("4. HTML –ø–∞—Ä—Å–µ—Ä (–æ–±—Ö–æ–¥ 403)")
    print("5. –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –ø—Ä–æ–∫—Å–∏")
    print("6. FlareSolverr + Selenium (–æ–±—Ö–æ–¥ –∞–Ω—Ç–∏–±–æ—Ç–∞)")
    print("7. –í—Å–µ —Ç–µ—Å—Ç—ã")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç (1-7): ").strip()
    
    if choice == "1":
        print("\nüß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞...")
        from test_new_ozon_parser import main as test_main
        await test_main()
        
    elif choice == "2":
        print("\nüåê –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–∞–º–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        from test_page_dump import main as dump_main
        await dump_main()
        
    elif choice == "3":
        print("\n‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞...")
        from test_new_ozon_parser import quick_test
        await quick_test()
        
    elif choice == "4":
        print("\nüåê –ó–∞–ø—É—Å–∫ HTML –ø–∞—Ä—Å–µ—Ä–∞...")
        from test_html_parser import main as html_main
        await html_main()
        
    elif choice == "5":
        print("\nüåê –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ IP –ø—Ä–æ–∫—Å–∏...")
        from test_proxy_ip import main as ip_main
        await ip_main()
        
    elif choice == "6":
        print("\nüî• –ó–∞–ø—É—Å–∫ FlareSolverr + Selenium —Ç–µ—Å—Ç–∞...")
        from test_flaresolverr import main as flaresolverr_main
        await flaresolverr_main()
        
    elif choice == "7":
        print("\nüîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...")
        
        print("\n1Ô∏è‚É£ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞:")
        from test_new_ozon_parser import main as test_main
        await test_main()
        
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –¥–∞–º–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
        from test_page_dump import main as dump_main
        await dump_main()
        
        print("\n3Ô∏è‚É£ HTML –ø–∞—Ä—Å–µ—Ä:")
        from test_html_parser import main as html_main
        await html_main()
        
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –ø—Ä–æ–∫—Å–∏:")
        from test_proxy_ip import main as ip_main
        await ip_main()
        
        print("\n5Ô∏è‚É£ FlareSolverr + Selenium:")
        from test_flaresolverr import main as flaresolverr_main
        await flaresolverr_main()
        
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        return
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
