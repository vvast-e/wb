import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import pytz
import concurrent.futures

from database import AsyncSessionLocal
from crud.shop import (
    create_shop, get_shops_by_user, get_shop_by_id, 
    add_price_history, get_price_history_by_nmid, get_latest_price
)
from crud.user import get_user_by_email
from models.user import User
from utils.wb_price_parser import WBPriceParser, fetch_wb_price_history, fetch_wb_current_price
from utils.ozon_selenium_parser import get_ozon_products_and_prices_seleniumwire
from utils.ozon_api import fetch_offer_ids_and_skus_from_ozon, fetch_prices_v5_by_offer_ids
from config import settings
from supplier_ids import SUPPLIERS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_context = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_parsing_tasks = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_stop_events = {}

class PriceMonitorBot:
    def __init__(self):
        self.parser = WBPriceParser()
        self.application = None
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        telegram_id = update.effective_user.id
        username = update.effective_user.username
        first_name = update.effective_user.first_name
        last_name = update.effective_user.last_name
        async with AsyncSessionLocal() as db:
            from models.telegram_user import TelegramUser
            from sqlalchemy import select
            result = await db.execute(select(TelegramUser).where(TelegramUser.telegram_id == telegram_id))
            user = result.scalars().first()
            if not user:
                db.add(TelegramUser(
                    telegram_id=telegram_id,
                    username=username,
                    first_name=first_name,
                    last_name=last_name
                ))
                await db.commit()
        await self.show_main_menu(update, context)

    async def menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
        await self.show_main_menu(update, context)

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id if update.effective_user else (update.message.from_user.id if update.message else None)
        keyboard = [
            [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω", callback_data="price_history")],
            [InlineKeyboardButton("üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", callback_data="current_price")]
        ]
        if user_parsing_tasks.get((user_id, "wb")):
            keyboard.append([InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä WB", callback_data="stop_wb")])
        else:
            keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä WB", callback_data="start_wb")])
        if user_parsing_tasks.get((user_id, "ozon")):
            keyboard.append([InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä Ozon", callback_data="stop_ozon")])
        else:
            keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä Ozon", callback_data="start_ozon")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        from telegram import ReplyKeyboardMarkup, KeyboardButton
        reply_keyboard = [[KeyboardButton("üìã –ú–µ–Ω—é")]]
        reply_markup_bottom = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
        if update.message:
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω Wildberries –∏ Ozon!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞",
                reply_markup=reply_markup_bottom
            )
        elif update.callback_query:
            try:
                await update.callback_query.edit_message_text(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω Wildberries –∏ Ozon!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
            except Exception as e:
                if "Message is not modified" in str(e):
                    await update.callback_query.answer()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
                    await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é")

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = update.effective_user.id
        if query.data == "change_market":
            await self.show_main_menu(update, context)
            return
        if query.data == "start_wb":
            await self.start_wb_parser(update, context, user_id)
            return
        if query.data == "stop_wb":
            await self.stop_wb_parser(update, context, user_id)
            return
        if query.data == "start_ozon":
            await self.start_ozon_parser(update, context, user_id)
            return
        if query.data == "stop_ozon":
            await self.stop_ozon_parser(update, context, user_id)
            return
        if query.data == "price_history":
            await self.show_suppliers_menu(update, context)
        elif query.data == "current_price":
            await self.show_suppliers_menu(update, context, current_price=True)
        elif query.data == "back_to_main":
            await self.show_main_menu(update, context)
        elif query.data == "show_menu":
            await self.show_main_menu(update, context)
        elif query.data.startswith("supplier_"):
            parts = query.data.split("_")
            supplier_id = int(parts[1])
            if "page" in parts:
                page = 1
                current_price = "current" in parts
                try:
                    page_index = parts.index("page")
                    if page_index + 1 < len(parts):
                        page = int(parts[page_index + 1])
                except Exception:
                    page = 1
                await self.show_supplier_products(update, context, supplier_id, page, current_price=current_price)
            elif "back" in parts:
                current_price = "current" in parts
                await self.show_suppliers_menu(update, context, current_price=current_price)
            else:
                current_price = "current" in parts
                await self.show_supplier_products(update, context, supplier_id, 1, current_price=current_price)
        elif query.data.startswith("product_"):
            parts = query.data.split("_")
            nm_id = parts[1]  # nm_id —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
            supplier_id = int(parts[2])
            if len(parts) > 3 and parts[3] == "current":
                await self.show_product_current_price(update, context, nm_id, supplier_id)
            else:
                await self.show_product_history(update, context, nm_id, supplier_id)

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        if text == "üìã –ú–µ–Ω—é":
            await self.show_main_menu(update, context)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await update.message.reply_text(
                "üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìã –ú–µ–Ω—é' –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞"
            )

    async def show_suppliers_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, current_price: bool = False):
        keyboard = []
        for supplier_id, name in SUPPLIERS.items():
            if current_price:
                callback = f"supplier_{supplier_id}_current"
            else:
                callback = f"supplier_{supplier_id}"
            keyboard.append([InlineKeyboardButton(f"üè™ {name}", callback_data=callback)])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            await update.callback_query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:",
                reply_markup=reply_markup
            )
        except Exception as e:
            if "Message is not modified" in str(e):
                await update.callback_query.answer()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–æ–≤: {e}")
                await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é")

    async def show_supplier_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE, supplier_id: int, page: int = 1, current_price: bool = False):
        user_id = update.effective_user.id
        market = user_context.get(user_id, {}).get("market", "wb")
        try:
            if supplier_id == 975642:  # OZON
                async with AsyncSessionLocal() as db:
                    from models.product import Product
                    from sqlalchemy import select
                    result = await db.execute(select(Product).where(Product.brand == '11i Professional OZON'))
                    products = result.scalars().all()
                    nm_ids = [p.nm_id for p in products]
            else:
                nm_ids = await self.parser.get_products_by_supplier_id(supplier_id)
            if not nm_ids:
                context_type = user_context.get(user_id, {}).get("context", "history")
                back_callback = f"supplier_{supplier_id}_back{'_current' if context_type == 'current_price' else ''}"
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.callback_query.edit_message_text(
                    f"–¢–æ–≤–∞—Ä—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {SUPPLIERS.get(supplier_id, supplier_id)} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=reply_markup
                )
                return
            page_size = 10
            total_pages = (len(nm_ids) + page_size - 1) // page_size
            page = max(1, min(page, total_pages))
            start = (page - 1) * page_size
            end = start + page_size
            keyboard = []
            from models.product import Product
            from sqlalchemy import select
            async with AsyncSessionLocal() as db:
                for nm_id in nm_ids[start:end]:
                    result = await db.execute(select(Product).where(Product.nm_id == str(nm_id)))
                    product = result.scalars().first()
                    if supplier_id == 975642 and product and product.vendor_code:
                        display_code = f"{product.vendor_code}"
                    else:
                        display_code = product.vendor_code if (product and product.vendor_code) else nm_id
                    if current_price:
                        keyboard.append([InlineKeyboardButton(
                            f"üì¶ –¢–æ–≤–∞—Ä {display_code}",
                            callback_data=f"product_{nm_id}_{supplier_id}_current"
                        )])
                    else:
                        keyboard.append([InlineKeyboardButton(
                            f"üì¶ –¢–æ–≤–∞—Ä {display_code}",
                            callback_data=f"product_{nm_id}_{supplier_id}"
                        )])
            nav_buttons = []
            if page > 1:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"supplier_{supplier_id}_page_{page-1}{'_current' if current_price else ''}"))
            if page < total_pages:
                nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"supplier_{supplier_id}_page_{page+1}{'_current' if current_price else ''}"))
            if nav_buttons:
                keyboard.append(nav_buttons)
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ suppliers_menu –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_main")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            try:
                await update.callback_query.edit_message_text(
                    f"–¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ {SUPPLIERS.get(supplier_id, supplier_id)} (—Å—Ç—Ä. {page}/{total_pages}):",
                    reply_markup=reply_markup
                )
            except Exception as e:
                if "Message is not modified" in str(e):
                    await update.callback_query.answer()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
                    await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        except Exception as e:
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}"
            )

    async def show_product_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE, nm_id: str, supplier_id: int):
        await update.callback_query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω...")
        user_id = update.effective_user.id
        market = user_context.get(user_id, {}).get("market", "wb")
        try:
            from models.price_change_history import PriceChangeHistory
            from sqlalchemy import select
            async with AsyncSessionLocal() as db:
                # –î–ª—è Ozon –∏ WB —Ç–µ–ø–µ—Ä—å –∏—â–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ nm_id (SKU)
                result = await db.execute(
                    select(PriceChangeHistory)
                    .where(PriceChangeHistory.nm_id == nm_id, PriceChangeHistory.shop_id == supplier_id)
                    .order_by(PriceChangeHistory.created_at.asc())
                )
                changes = result.scalars().all()
            if not changes:
                vendor_code = await self.get_vendor_code_by_nm_id(None, nm_id, supplier_id)
                display_code = vendor_code or nm_id
                context_type = user_context.get(user_id, {}).get("context", "history")
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_main")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:
                    await update.callback_query.edit_message_text(
                        f"–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {display_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    if "Message is not modified" in str(e):
                        await update.callback_query.answer()
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")
                return
            lines = []
            moscow_tz = pytz.timezone('Europe/Moscow')
            for record in changes:
                data = record.change_data
                if 'date' in data:
                    try:
                        date_obj = datetime.fromisoformat(data['date'].replace('Z', '+00:00'))
                        moscow_time = date_obj.astimezone(moscow_tz)
                        date_str = moscow_time.strftime('%d.%m.%Y %H:%M')
                    except:
                        try:
                            date_obj = datetime.fromisoformat(data['date'].replace('Z', '+00:00'))
                            moscow_time = date_obj.replace(tzinfo=pytz.UTC).astimezone(moscow_tz)
                            date_str = moscow_time.strftime('%d.%m.%Y %H:%M')
                        except:
                            date_str = data.get("date", "?")
                else:
                    date_str = "?"
                old = data.get("old_price", "‚Äî")
                new = data.get("new_price", "‚Äî")
                diff = data.get("diff", 0)
                diff_str = f"(‚ñ≤ {diff})" if diff > 0 else (f"(‚ñº {abs(diff)})" if diff < 0 else "")
                lines.append(f"{date_str}: {old} ‚Üí {new} ‚ÇΩ {diff_str}")
            vendor_code = await self.get_vendor_code_by_nm_id(None, nm_id, supplier_id)
            display_code = vendor_code or nm_id
            history_text = f"üìä –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞ {display_code}:\n\n" + "\n".join(lines[::-1])
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            try:
                await update.callback_query.edit_message_text(
                    history_text,
                    reply_markup=reply_markup
                )
            except Exception as e:
                if "Message is not modified" in str(e):
                    await update.callback_query.answer()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                    await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")
        except Exception as e:
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {str(e)}"
            )

    async def get_vendor_code_by_nm_id(self, db, nm_id: str, shop_id: int) -> Optional[str]:
        try:
            from models.product import Product
            from sqlalchemy import select
            if db is None:
                async with AsyncSessionLocal() as db_session:
                    if shop_id == 975642:
                        # –î–ª—è Ozon nm_id ‚Äî —ç—Ç–æ sku, –∏—â–µ–º –ø–æ nm_id ‚Üí vendor_code
                        result = await db_session.execute(select(Product).where(Product.nm_id == str(nm_id)))
                        product = result.scalars().first()
                        return product.vendor_code if product else None
                    else:
                        result = await db_session.execute(select(Product).where(Product.nm_id == str(nm_id)))
                        product = result.scalars().first()
                        return product.vendor_code if product else None
            else:
                if shop_id == 975642:
                    result = await db.execute(select(Product).where(Product.nm_id == str(nm_id)))
                    product = result.scalars().first()
                    return product.vendor_code if product else None
                else:
                    result = await db.execute(select(Product).where(Product.nm_id == str(nm_id)))
                    product = result.scalars().first()
                    return product.vendor_code if product else None
        except Exception as e:
            print(f"[Bot] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ vendor_code –ø–æ nm_id: {e}")
            return None

    async def show_product_current_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE, nm_id: str,
                                         supplier_id: int):
        await update.callback_query.edit_message_text("‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ...")
        user_id = update.effective_user.id
        market = user_context.get(user_id, {}).get("market", "wb")
        try:
            async with AsyncSessionLocal() as db:
                from models.shop import PriceHistory
                from models.product import Product
                from sqlalchemy import select
                if supplier_id == 975642:
                    # –î–ª—è Ozon –∏—â–µ–º vendor_code –ø–æ nm_id, –∞ –∑–∞—Ç–µ–º –∏—â–µ–º —Ü–µ–Ω—É –ø–æ vendor_code
                    result = await db.execute(select(Product).where(Product.nm_id == str(nm_id)))
                    product = result.scalars().first()
                    vendor_code = product.vendor_code if product else None
                    if vendor_code:
                        result = await db.execute(
                            select(PriceHistory).where(
                                PriceHistory.vendor_code == vendor_code,
                                PriceHistory.shop_id == supplier_id
                            ).order_by(PriceHistory.price_date.desc())
                        )
                        latest = result.scalars().first()
                        price = latest.new_price if latest else None
                    else:
                        price = None
                else:
                    # –î–ª—è WB –∏—â–µ–º –ø–æ nm_id
                    result = await db.execute(
                        select(PriceHistory).where(
                            PriceHistory.nm_id == str(nm_id),
                            PriceHistory.shop_id == supplier_id
                        ).order_by(PriceHistory.price_date.desc())
                    )
                    latest = result.scalars().first()
                    price = latest.new_price if latest else None
                    vendor_code = await self.get_vendor_code_by_nm_id(db, nm_id, supplier_id)

            display_code = vendor_code or nm_id
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            if price is None:
                await update.callback_query.edit_message_text(
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {display_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=reply_markup
                )
                return

            price_str = f"{int(price):,}".replace(",", " ")
            text = (f"üì¶ –¢–æ–≤–∞—Ä: {display_code}\n"
                    f"üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price_str} ‚ÇΩ")
            await update.callback_query.edit_message_text(
                text,
                reply_markup=reply_markup
            )
        except Exception as e:
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_main")]])
            )
    
    async def price_history_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω"""
        await self.show_suppliers_menu(update, context)
    
    async def monitor_prices_task(self, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ supplier_id –∏–∑ supplier_ids.py"""
        stop_event_key = context.job.data.get("stop_event_key")
        stop_event = user_stop_events.get(stop_event_key)
        try:
            total_prices = 0
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Wildberries
            async with AsyncSessionLocal() as db:
                for supplier_id, shop_name in SUPPLIERS.items():
                    if stop_event and stop_event.is_set():
                        print(f"[WB Monitor] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {stop_event_key}")
                        return
                    try:
                        nm_ids = await self.parser.get_products_by_supplier_id(supplier_id)
                        for nm_id in nm_ids:
                            if stop_event and stop_event.is_set():
                                print(f"[WB Monitor] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {stop_event_key}")
                                return
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å WB
                                current_price, _ = await fetch_wb_current_price(nm_id)
                                if current_price is None:
                                    continue
                                total_prices += 1
                                
                                # –ü–æ–ª—É—á–∞–µ–º vendorCode –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                                vendor_code = await self.get_vendor_code_by_nm_id(db, nm_id, supplier_id)
                                display_code = vendor_code or str(nm_id)
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–∞—Ä—Å–µ–Ω–Ω—É—é —Ü–µ–Ω—É
                                print(f"[Price] {shop_name} | {display_code} | {int(current_price)} ‚ÇΩ")
                                
                                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ –±–∞–∑—ã
                                from models.shop import PriceHistory
                                result = await db.execute(
                                    select(PriceHistory).where(
                                        PriceHistory.nm_id == str(nm_id),
                                        PriceHistory.shop_id == supplier_id
                                    ).order_by(PriceHistory.price_date.desc())
                                )
                                latest_price = result.scalars().first()
                                old_price = latest_price.new_price if latest_price else None
                                # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                                if old_price is not None and old_price != int(current_price):
                                    await self.send_price_change_notification(
                                        shop_name, display_code, old_price, int(current_price), display_code, nm_id, context
                                    )
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                                    from crud.shop import save_price_change_history
                                    await save_price_change_history(db, nm_id, supplier_id, old_price, int(current_price))
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
                                from crud.shop import add_price_history
                                await add_price_history(
                                    db, str(nm_id), supplier_id, nm_id, int(current_price), old_price, market="wb"
                                )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ {nm_id}: {e}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –º–∞–≥–∞–∑–∏–Ω–∞ {shop_name}: {e}")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Ozon (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            try:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Ozon –º–∞–≥–∞–∑–∏–Ω–æ–≤
                # ozon_seller_url = "https://www.ozon.ru/seller/11i-professional-975642/products/"
                # ozon_result = get_all_products_prices(ozon_seller_url, max_products=20)
                # print(f"[Ozon Monitor] {ozon_result}")
                pass
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ Ozon: {e}")
            
            print(f"[Monitor] –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω: {total_prices} (–æ–∂–∏–¥–∞–ª–æ—Å—å 37)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω: {e}")

    async def send_price_change_notification(self, shop_name: str, vendor_code: str, old_price: int, new_price: int, product_name: str, nm_id: int, context, discount_price: int = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ /start"""
        try:
            change = new_price - old_price
            change_str = f"{change:+,}".replace(",", " ")
            price_str = f"{new_price:,}".replace(",", " ")
            old_price_str = f"{old_price:,}".replace(",", " ")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if shop_name.lower().endswith("ozon"):
                url = f"https://www.ozon.ru/product/{nm_id}/"
                shop_display = "11i professional OZON"
            else:
                from supplier_ids import SUPPLIERS
                url = f"https://www.wildberries.ru/catalog/{nm_id}/detail.aspx"
                shop_display = SUPPLIERS.get(int(shop_name.split()[0]), shop_name) if shop_name.split()[0].isdigit() else shop_name
            message = (
                f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã!\n\n"
                f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {shop_display}\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {vendor_code}\n"
                f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: {nm_id}\n"
                f"üíµ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price_str} ‚ÇΩ\n"
                f"üíµ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {price_str} ‚ÇΩ\n"
            )
            if discount_price is not None and shop_name.lower().endswith("ozon"):
                message += f"üí∏ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {discount_price:,} ‚ÇΩ\n"
            elif discount_price is not None:
                message += f"üí∏ –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {discount_price:,} ‚ÇΩ\n"
            message += (
                f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_str} ‚ÇΩ\n\n"
                f"–°—Å—ã–ª–∫–∞: {url}"
            )
            from models.telegram_user import TelegramUser
            from sqlalchemy import select
            async with AsyncSessionLocal() as db:
                result = await db.execute(select(TelegramUser.telegram_id))
                chat_ids = result.scalars().all()
                batch_size = 25
                delay_between_batches = 1.1
                print(f"[Notification] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {len(chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                for i in range(0, len(chat_ids), batch_size):
                    batch = chat_ids[i:i + batch_size]
                    tasks = []
                    for chat_id in batch:
                        task = self._send_single_notification(context, chat_id, message)
                        tasks.append(task)
                    await asyncio.gather(*tasks, return_exceptions=True)
                    if i + batch_size < len(chat_ids):
                        await asyncio.sleep(delay_between_batches)
                print(f"[Notification] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def _send_single_notification(self, context, chat_id, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await context.bot.send_message(chat_id=chat_id, text=message, disable_web_page_preview=True)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –Ω–µ —Å–ø–∞–º–∏–º –ª–æ–≥
            if "bot was blocked" not in str(e).lower() and "chat not found" not in str(e).lower():
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è chat_id={chat_id}: {e}")
    
    async def start_wb_parser(self, update, context, user_id):
        if user_parsing_tasks.get((user_id, "wb")):
            await update.callback_query.answer("–ü–∞—Ä—Å–µ—Ä WB —É–∂–µ –∑–∞–ø—É—â–µ–Ω.", show_alert=True)
            return
        # –°–æ–∑–¥–∞—ë–º Event –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        import asyncio
        stop_event = asyncio.Event()
        user_stop_events[(user_id, "wb")] = stop_event
        # –ó–∞–ø—É—Å–∫ WB-–ø–∞—Ä—Å–µ—Ä–∞ (–ø—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ job_queue)
        job = context.job_queue.run_repeating(self.monitor_prices_task, interval=900, first=1, name=f"wb_{user_id}", data={"user_id": user_id, "market": "wb", "stop_event_key": (user_id, "wb")})
        user_parsing_tasks[(user_id, "wb")] = job
        await update.callback_query.answer("–ü–∞—Ä—Å–µ—Ä WB –∑–∞–ø—É—â–µ–Ω!", show_alert=True)
        await self.show_main_menu(update, context)

    async def stop_wb_parser(self, update, context, user_id):
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Event
        stop_event = user_stop_events.pop((user_id, "wb"), None)
        if stop_event:
            stop_event.set()
        job = user_parsing_tasks.pop((user_id, "wb"), None)
        if job:
            job.schedule_removal()
            await update.callback_query.answer("–ü–∞—Ä—Å–µ—Ä WB –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", show_alert=True)
        else:
            await update.callback_query.answer("–ü–∞—Ä—Å–µ—Ä WB –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.", show_alert=True)
        await self.show_main_menu(update, context)

    async def start_ozon_parser(self, update, context, user_id):
        if user_parsing_tasks.get((user_id, "ozon")):
            await update.callback_query.answer("–ü–∞—Ä—Å–µ—Ä Ozon —É–∂–µ –∑–∞–ø—É—â–µ–Ω.", show_alert=True)
            return
        # –°–æ–∑–¥–∞—ë–º Event –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        import asyncio
        stop_event = asyncio.Event()
        user_stop_events[(user_id, "ozon")] = stop_event
        # –ó–∞–ø—É—Å–∫ Ozon-–ø–∞—Ä—Å–µ—Ä–∞ (—á–µ—Ä–µ–∑ job_queue, –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞)
        job = context.job_queue.run_repeating(self.monitor_ozon_task, interval=900, first=1, name=f"ozon_{user_id}", data={"user_id": user_id, "market": "ozon", "stop_event_key": (user_id, "ozon")})
        user_parsing_tasks[(user_id, "ozon")] = job
        await update.callback_query.answer("–ü–∞—Ä—Å–µ—Ä Ozon –∑–∞–ø—É—â–µ–Ω!", show_alert=True)
        await self.show_main_menu(update, context)

    async def stop_ozon_parser(self, update, context, user_id):
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Event
        stop_event = user_stop_events.pop((user_id, "ozon"), None)
        if stop_event:
            stop_event.set()
        job = user_parsing_tasks.pop((user_id, "ozon"), None)
        if job:
            job.schedule_removal()
            await update.callback_query.answer("–ü–∞—Ä—Å–µ—Ä Ozon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", show_alert=True)
        else:
            await update.callback_query.answer("–ü–∞—Ä—Å–µ—Ä Ozon –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.", show_alert=True)
        await self.show_main_menu(update, context)

    async def monitor_ozon_task(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Ozon —á–µ—Ä–µ–∑ API"""
        stop_event_key = context.job.data.get("stop_event_key")
        stop_event = user_stop_events.get(stop_event_key)
        OZON_SELLER_ID = 975642
        try:
            total_prices = 0
            from models.shop import PriceHistory
            from crud.shop import add_price_history, save_price_change_history
            from models.product import Product
            from sqlalchemy import select

            async with AsyncSessionLocal() as db:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ offer_id –∏ sku —á–µ—Ä–µ–∑ API
                offer_sku_list = await fetch_offer_ids_and_skus_from_ozon()
                offer_ids = [item["offer_id"] for item in offer_sku_list]
                offerid_to_sku = {item["offer_id"]: item["sku"] for item in offer_sku_list}

                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –ø–æ offer_id —á–µ—Ä–µ–∑ API
                items = await fetch_prices_v5_by_offer_ids(offer_ids)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                import json
                with open("ozon_api_prices_response.json", "w", encoding="utf-8") as f:
                    json.dump(items, f, ensure_ascii=False, indent=2)

                for item in items:
                    if stop_event and stop_event.is_set():
                        print(f"[Ozon Monitor] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {stop_event_key}")
                        return

                    offer_id = item.get("offer_id")
                    # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ offer_id –µ—Å—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ offerid_to_sku
                    if not offer_id or offer_id not in offerid_to_sku:
                        continue
                    sku = offerid_to_sku.get(offer_id)
                    price_data = item.get("price", {})
                    price_regular = price_data.get("marketing_price")
                    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if not (offer_id and sku and price_regular):
                        continue

                    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –ø–æ nm_id (sku)
                    result = await db.execute(select(Product).where(Product.nm_id == str(sku)))
                    product_db = result.scalars().first()

                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                    if not product_db:
                        product_db = Product(
                            nm_id=str(sku),
                            vendor_code=str(offer_id),
                            brand="11i Professional OZON"
                        )
                        db.add(product_db)
                        await db.commit()

                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                    result = await db.execute(
                        select(PriceHistory).where(
                            PriceHistory.vendor_code == str(offer_id),
                            PriceHistory.shop_id == OZON_SELLER_ID,
                            PriceHistory.market == 'ozon'
                        ).order_by(PriceHistory.price_date.desc())
                    )
                    latest_price = result.scalars().first()
                    old_price = latest_price.new_price if latest_price else None

                    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if old_price is not None and old_price != int(price_regular):
                        # –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π = –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ - 10.03%
                        discount_price = int(round(int(price_regular) * (1 - 0.1003)))
                        await self.send_price_change_notification(
                            shop_name="11i professional OZON",
                            vendor_code=str(offer_id),
                            old_price=old_price,
                            new_price=int(price_regular),
                            product_name=str(sku),
                            nm_id=sku,
                            context=context,
                            discount_price=discount_price
                        )
                        await save_price_change_history(db, sku, OZON_SELLER_ID, old_price, int(price_regular))

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É —Å—Ç—Ä–æ–≥–æ –ø–æ offer_id (vendor_code) –∏ sku (nm_id)
                    await add_price_history(
                        db,
                        vendor_code=str(offer_id),
                        shop_id=OZON_SELLER_ID,
                        nm_id=str(sku),
                        new_price=int(price_regular),
                        old_price=old_price,
                        market="ozon"
                    )
                    total_prices += 1

            print(f"[Ozon Monitor] –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω: {total_prices}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω Ozon: {e}")
            import traceback
            traceback.print_exc()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("menu", self.menu))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ WB:
        # self.application.job_queue.run_repeating(self.monitor_prices_task, interval=900, first=10)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.application.run_polling()


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = PriceMonitorBot()

if __name__ == "__main__":
    bot.run() 