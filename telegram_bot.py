import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from database import AsyncSessionLocal
from crud.shop import (
    create_shop, get_shops_by_user, get_shop_by_id, 
    add_price_history, get_price_history_by_vendor, get_latest_price
)
from crud.user import get_user_by_email
from models.user import User
from utils.wb_price_parser import WBPriceParser
from config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class PriceMonitorBot:
    def __init__(self):
        self.parser = WBPriceParser()
        self.application = None
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="add_shop")],
            [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω", callback_data="price_history")],
            [InlineKeyboardButton("üîç –ú–æ–∏ –º–∞–≥–∞–∑–∏–Ω—ã", callback_data="my_shops")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω Wildberries!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
        if update.callback_query:
            # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ callback (–∫–Ω–æ–ø–∫–∏)
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=reply_markup
            )
        elif update.message:
            # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ–º–∞–Ω–¥–∞ /start)
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup
            )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "add_shop":
            await self.add_shop_start(update, context)
        elif query.data == "price_history":
            await self.price_history_start(update, context)
        elif query.data == "my_shops":
            await self.my_shops(update, context)
        elif query.data.startswith("shop_"):
            shop_id = int(query.data.split("_")[1])
            await self.show_shop_products(update, context, shop_id)
        elif query.data.startswith("product_"):
            parts = query.data.split("_")
            vendor_code = parts[1]
            shop_id = int(parts[2])
            await self.show_product_history(update, context, vendor_code, shop_id)
        elif query.data == "back_to_main":
            await self.start(update, context)
    
    async def add_shop_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
        user_states[update.effective_user.id] = {"state": "waiting_shop_name"}
        
        message_text = (
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ Wildberries:\n\n"
            "–ü—Ä–∏–º–µ—Ä: '11i professional'"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
        if update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        elif update.message:
            await update.message.reply_text(message_text)
    
    async def get_user_by_telegram_id(self, db: AsyncSession, telegram_id: int) -> Optional[User]:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å admin —Å—Ç–∞—Ç—É—Å–æ–º –∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
            result = await db.execute(select(User).where(User.status == "admin").limit(1))
            user = result.scalars().first()
            
            if not user:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–¥–º–∏–Ω–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await db.execute(select(User).limit(1))
                user = result.scalars().first()
            
            if not user:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Telegram
                from crud.user import create_user
                from schemas import UserCreate
                
                user_data = UserCreate(
                    email=f"telegram_{telegram_id}@bot.local",
                    password="telegram_bot_password_123"
                )
                user = await create_user(db, user_data)
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è Telegram ID {telegram_id}")
            else:
                logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user.id} –¥–ª—è Telegram ID {telegram_id}")
            
            return user
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    async def handle_shop_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
        user_id = update.effective_user.id
        shop_name = update.message.text.strip()
        
        if user_id not in user_states or user_states[user_id]["state"] != "waiting_shop_name":
            return
        
        try:
            async with AsyncSessionLocal() as db:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
                user = await self.get_user_by_telegram_id(db, user_id)
                if not user:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Telegram ID {user_id}")
                    await update.message.reply_text(
                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                    return
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID={user.id}, Email={user.email}")
                
                shop = await create_shop(db, shop_name, shop_name, user.id)
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω '{shop_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"ID –º–∞–≥–∞–∑–∏–Ω–∞: {shop.id}",
                    reply_markup=reply_markup
                )
                
                del user_states[user_id]
                
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {str(e)}"
            )
    
    async def my_shops(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with AsyncSessionLocal() as db:
                user = await self.get_user_by_telegram_id(db, update.effective_user.id)
                if not user:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Telegram ID {update.effective_user.id}")
                    await update.callback_query.edit_message_text(
                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                    return
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –¥–ª—è my_shops: ID={user.id}, Email={user.email}")
                
                shops = await get_shops_by_user(db, user.id)
                
                if not shops:
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.callback_query.edit_message_text(
                        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤.",
                        reply_markup=reply_markup
                    )
                    return
                
                keyboard = []
                for shop in shops:
                    keyboard.append([InlineKeyboardButton(
                        f"üè™ {shop.name}", 
                        callback_data=f"shop_{shop.id}"
                    )])
                
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤:",
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {str(e)}"
            )
    
    async def show_shop_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE, shop_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞"""
        try:
            async with AsyncSessionLocal() as db:
                shop = await get_shop_by_id(db, shop_id)
                
                if not shop:
                    await update.callback_query.edit_message_text("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
                user = await self.get_user_by_telegram_id(db, update.effective_user.id)
                if not user:
                    await update.callback_query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                logger.info(f"–ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ '{shop.name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                products = await self.parser.get_products_by_shop(shop.name, user.id, db)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                
                if not products:
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_shops")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.callback_query.edit_message_text(
                        f"–¢–æ–≤–∞—Ä—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ '{shop.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                        reply_markup=reply_markup
                    )
                    return
                
                keyboard = []
                for product in products[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
                    price_str = f"{product.get('price', 0):,}".replace(",", " ")
                    product_name = product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
                    product_id = product.get('id', '')
                    
                    keyboard.append([InlineKeyboardButton(
                        f"üì¶ {product_name[:30]}... ({price_str} ‚ÇΩ)",
                        callback_data=f"product_{product_id}_{shop_id}"
                    )])
                
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_shops")])
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.edit_message_text(
                    f"–¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ '{shop.name}':",
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}"
            )
    
    async def show_product_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                 vendor_code: str, shop_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω —Ç–æ–≤–∞—Ä–∞"""
        try:
            async with AsyncSessionLocal() as db:
                price_history = await get_price_history_by_vendor(db, vendor_code, shop_id)
                
                if not price_history:
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"shop_{shop_id}")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.callback_query.edit_message_text(
                        f"–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {vendor_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                        reply_markup=reply_markup
                    )
                    return
                
                history_text = f"üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω —Ç–æ–≤–∞—Ä–∞ {vendor_code}:\n\n"
                
                for i, price in enumerate(price_history[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
                    date_str = price.price_date.strftime("%d.%m.%Y %H:%M")
                    price_str = f"{price.new_price:,}".replace(",", " ")
                    
                    if price.old_price:
                        old_price_str = f"{price.old_price:,}".replace(",", " ")
                        change = price.new_price - price.old_price
                        change_str = f"({change:+,})".replace(",", " ")
                        history_text += f"{date_str}: {price_str} ‚ÇΩ {change_str}\n"
                    else:
                        history_text += f"{date_str}: {price_str} ‚ÇΩ\n"
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"shop_{shop_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.edit_message_text(
                    history_text,
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: {str(e)}"
            )
    
    async def price_history_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω"""
        await self.my_shops(update, context)
    
    async def monitor_prices_task(self, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
        try:
            async with AsyncSessionLocal() as db:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
                from crud.shop import get_all_active_shops
                shops = await get_all_active_shops(db)
                
                for shop in shops:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞
                        user = await self.get_user_by_telegram_id(db, shop.user_id)
                        if not user:
                            continue
                        
                        products = await self.parser.get_products_by_shop(shop.name, user.id, db)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                        for product in products:
                            try:
                                nm_id = int(product['id'])
                                current_price = product.get('price', 0)
                                vendor_code = product.get('vendor_code', '')
                                product_name = product.get('name', '')
                                
                                if current_price and vendor_code:
                                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ –ë–î
                                    latest_price = await get_latest_price(db, vendor_code, shop.id)
                                    
                                    if latest_price and latest_price.new_price != current_price:
                                        # –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                                        await self.send_price_change_notification(
                                            shop.user_id, shop.name, vendor_code, 
                                            latest_price.new_price, current_price, product_name, nm_id
                                        )
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
                                    await add_price_history(
                                        db, vendor_code, shop.id, nm_id, current_price,
                                        latest_price.new_price if latest_price else None
                                    )
                                    
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ {product['id']}: {e}")
                                
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –º–∞–≥–∞–∑–∏–Ω–∞ {shop.name}: {e}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω: {e}")

    async def send_price_change_notification(self, user_id: int, shop_name: str, vendor_code: str, 
                                           old_price: int, new_price: int, product_name: str, nm_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
        try:
            async with AsyncSessionLocal() as db:
                result = await db.execute(select(User).where(User.id == user_id))
                user = result.scalars().first()
                if not user:
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                change = new_price - old_price
                change_str = f"{change:+,}".replace(",", " ")
                price_str = f"{new_price:,}".replace(",", " ")
                old_price_str = f"{old_price:,}".replace(",", " ")
                
                message = (
                    f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã!\n\n"
                    f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {shop_name}\n"
                    f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
                    f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: {vendor_code}\n"
                    f"üíµ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price_str} ‚ÇΩ\n"
                    f"üíµ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {price_str} ‚ÇΩ\n"
                    f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_str} ‚ÇΩ\n\n"
                    f"üîó –°—Å—ã–ª–∫–∞: https://www.wildberries.ru/catalog/{nm_id}/detail.aspx"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram)
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {message}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_shop_name))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ JobQueue (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
        self.application.job_queue.run_repeating(self.monitor_prices_task, interval=1800, first=10)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.application.run_polling()


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = PriceMonitorBot()

if __name__ == "__main__":
    bot.run() 