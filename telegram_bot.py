import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import pytz

from database import AsyncSessionLocal
from crud.shop import (
    create_shop, get_shops_by_user, get_shop_by_id, 
    add_price_history, get_price_history_by_nmid, get_latest_price
)
from crud.user import get_user_by_email
from models.user import User
from utils.wb_price_parser import WBPriceParser, fetch_wb_price_history, fetch_wb_current_price
from config import settings
from supplier_ids import SUPPLIERS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_context = {}

class PriceMonitorBot:
    def __init__(self):
        self.parser = WBPriceParser()
        self.application = None
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        telegram_id = update.effective_user.id
        username = update.effective_user.username
        first_name = update.effective_user.first_name
        last_name = update.effective_user.last_name
        async with AsyncSessionLocal() as db:
            from models.telegram_user import TelegramUser
            from sqlalchemy import select
            result = await db.execute(select(TelegramUser).where(TelegramUser.telegram_id == telegram_id))
            user = result.scalars().first()
            if not user:
                db.add(TelegramUser(
                    telegram_id=telegram_id,
                    username=username,
                    first_name=first_name,
                    last_name=last_name
                ))
                await db.commit()
        await self.show_main_menu(update, context)

    async def menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
        await self.show_main_menu(update, context)

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω", callback_data="price_history")],
            [InlineKeyboardButton("üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", callback_data="current_price")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –°–æ–∑–¥–∞–µ–º Reply Keyboard –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é" –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
        from telegram import ReplyKeyboardMarkup, KeyboardButton
        reply_keyboard = [[KeyboardButton("üìã –ú–µ–Ω—é")]]
        reply_markup_bottom = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
        
        if update.message:
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω Wildberries!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é" –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞",
                reply_markup=reply_markup_bottom
            )
        elif update.callback_query:
            await update.callback_query.edit_message_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω Wildberries!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        if query.data == "price_history":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = update.effective_user.id
            user_context[user_id] = "history"
            await self.show_suppliers_menu(update, context)
        elif query.data == "current_price":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = update.effective_user.id
            user_context[user_id] = "current_price"
            await self.show_suppliers_menu(update, context, current_price=True)
        elif query.data.startswith("supplier_"):
            parts = query.data.split("_")
            supplier_id = int(parts[1])
            page = 1
            current_price = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "current" –≤ callback_data
            if "current" in parts:
                current_price = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "page" –≤ callback_data
            if "page" in parts:
                try:
                    page_index = parts.index("page")
                    if page_index + 1 < len(parts):
                        page = int(parts[page_index + 1])
                except Exception:
                    page = 1
            
            await self.show_supplier_products(update, context, supplier_id, page, current_price=current_price)
        elif query.data.startswith("product_"):
            parts = query.data.split("_")
            nm_id = int(parts[1])
            supplier_id = int(parts[2])
            if len(parts) > 3 and parts[3] == "current":
                await self.show_product_current_price(update, context, nm_id, supplier_id)
            else:
                await self.show_product_history(update, context, nm_id, supplier_id)
        elif query.data == "back_to_main":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = update.effective_user.id
            if user_id in user_context:
                del user_context[user_id]
            await self.show_main_menu(update, context)
        elif query.data == "show_menu":
            await self.show_main_menu(update, context)

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        if text == "üìã –ú–µ–Ω—é":
            await self.show_main_menu(update, context)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await update.message.reply_text(
                "üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìã –ú–µ–Ω—é' –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞"
            )

    async def show_suppliers_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, current_price: bool = False):
        keyboard = []
        for supplier_id, name in SUPPLIERS.items():
            if current_price:
                callback = f"supplier_{supplier_id}_current"
            else:
                callback = f"supplier_{supplier_id}"
            keyboard.append([InlineKeyboardButton(f"üè™ {name}", callback_data=callback)])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            await update.callback_query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:",
                reply_markup=reply_markup
            )
        except Exception as e:
            if "Message is not modified" in str(e):
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await update.callback_query.answer()
            else:
                # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ—ë
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–æ–≤: {e}")
                await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é")

    async def show_supplier_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE, supplier_id: int, page: int = 1, current_price: bool = False):
        try:
            nm_ids = await self.parser.get_products_by_supplier_id(supplier_id)
            if not nm_ids:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="price_history")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.callback_query.edit_message_text(
                    f"–¢–æ–≤–∞—Ä—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {SUPPLIERS.get(supplier_id, supplier_id)} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=reply_markup
                )
                return
            page_size = 10
            total_pages = (len(nm_ids) + page_size - 1) // page_size
            page = max(1, min(page, total_pages))
            start = (page - 1) * page_size
            end = start + page_size
            keyboard = []
            from models.product import Product
            from sqlalchemy import select
            async with AsyncSessionLocal() as db:
                for nm_id in nm_ids[start:end]:
                    # –ü–æ–ª—É—á–∞–µ–º vendorCode –∏–∑ –±–∞–∑—ã
                    result = await db.execute(select(Product).where(Product.nm_id == nm_id))
                    product = result.scalars().first()
                    display_code = product.vendor_code if (product and product.vendor_code) else nm_id
                    if current_price:
                        keyboard.append([InlineKeyboardButton(
                            f"üì¶ –¢–æ–≤–∞—Ä {display_code}",
                            callback_data=f"product_{nm_id}_{supplier_id}_current"
                        )])
                    else:
                        keyboard.append([InlineKeyboardButton(
                            f"üì¶ –¢–æ–≤–∞—Ä {display_code}",
                            callback_data=f"product_{nm_id}_{supplier_id}"
                        )])
            nav_buttons = []
            if page > 1:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"supplier_{supplier_id}_page_{page-1}{'_current' if current_price else ''}"))
            if page < total_pages:
                nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"supplier_{supplier_id}_page_{page+1}{'_current' if current_price else ''}"))
            if nav_buttons:
                keyboard.append(nav_buttons)
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"supplier_{supplier_id}{'_current' if current_price else ''}")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            try:
                await update.callback_query.edit_message_text(
                    f"–¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ {SUPPLIERS.get(supplier_id, supplier_id)} (—Å—Ç—Ä. {page}/{total_pages}):",
                    reply_markup=reply_markup
                )
            except Exception as e:
                if "Message is not modified" in str(e):
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                    await update.callback_query.answer()
                else:
                    # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ—ë
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
                    await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        except Exception as e:
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}"
            )

    async def show_product_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE, nm_id: int, supplier_id: int):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        await update.callback_query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω...")
        try:
            from models.price_change_history import PriceChangeHistory
            from sqlalchemy import select
            async with AsyncSessionLocal() as db:
                result = await db.execute(
                    select(PriceChangeHistory)
                    .where(PriceChangeHistory.nm_id == nm_id, PriceChangeHistory.shop_id == supplier_id)
                    .order_by(PriceChangeHistory.created_at.asc())
                )
                changes = result.scalars().all()
            if not changes:
                # –ü–æ–ª—É—á–∞–µ–º vendorCode –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                vendor_code = await self.get_vendor_code_by_nm_id(None, nm_id, supplier_id)
                display_code = vendor_code or nm_id
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
                user_id = update.effective_user.id
                context_type = user_context.get(user_id, "history")
                back_callback = f"supplier_{supplier_id}{'_current' if context_type == 'current_price' else ''}"
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:
                    await update.callback_query.edit_message_text(
                        f"–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {display_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    if "Message is not modified" in str(e):
                        await update.callback_query.answer()
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")
                return
            
            lines = []
            moscow_tz = pytz.timezone('Europe/Moscow')
            for record in changes:
                data = record.change_data
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                if 'date' in data:
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                        date_obj = datetime.fromisoformat(data['date'].replace('Z', '+00:00'))
                        moscow_time = date_obj.astimezone(moscow_tz)
                        date_str = moscow_time.strftime('%d.%m.%Y %H:%M')
                    except:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º +3 —á–∞—Å–∞ –∫ UTC
                        try:
                            date_obj = datetime.fromisoformat(data['date'].replace('Z', '+00:00'))
                            moscow_time = date_obj.replace(tzinfo=pytz.UTC).astimezone(moscow_tz)
                            date_str = moscow_time.strftime('%d.%m.%Y %H:%M')
                        except:
                            date_str = data.get("date", "?")
                else:
                    date_str = "?"
                old = data.get("old_price", "‚Äî")
                new = data.get("new_price", "‚Äî")
                diff = data.get("diff", 0)
                diff_str = f"(‚ñ≤ {diff})" if diff > 0 else (f"(‚ñº {abs(diff)})" if diff < 0 else "")
                lines.append(f"{date_str}: {old} ‚Üí {new} ‚ÇΩ {diff_str}")
            
            # –ü–æ–ª—É—á–∞–µ–º vendorCode –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            vendor_code = await self.get_vendor_code_by_nm_id(None, nm_id, supplier_id)
            display_code = vendor_code or nm_id
            history_text = f"üìä –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞ {display_code}:\n\n" + "\n".join(lines[::-1])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            user_id = update.effective_user.id
            context_type = user_context.get(user_id, "history")
            back_callback = f"supplier_{supplier_id}{'_current' if context_type == 'current_price' else ''}"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            try:
                await update.callback_query.edit_message_text(
                    history_text,
                    reply_markup=reply_markup
                )
            except Exception as e:
                if "Message is not modified" in str(e):
                    await update.callback_query.answer()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                    await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")
        except Exception as e:
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {str(e)}"
            )

    async def get_vendor_code_by_nm_id(self, db, nm_id: int, shop_id: int) -> Optional[str]:
        try:
            from models.product import Product
            from sqlalchemy import select
            if db is None:
                async with AsyncSessionLocal() as db_session:
                    result = await db_session.execute(select(Product).where(Product.nm_id == nm_id))
                    product = result.scalars().first()
                    return product.vendor_code if product else None
            else:
                result = await db.execute(select(Product).where(Product.nm_id == nm_id))
                product = result.scalars().first()
                return product.vendor_code if product else None
        except Exception as e:
            print(f"[Bot] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ vendor_code –ø–æ nm_id: {e}")
            return None

    async def show_product_current_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE, nm_id: int, supplier_id: int):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        await update.callback_query.edit_message_text("‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ...")
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞"""
        try:
            price, price_wallet = await fetch_wb_current_price(nm_id)
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å vendorCode –∏–∑ –±–∞–∑—ã
            async with AsyncSessionLocal() as db:
                vendor_code = await self.get_vendor_code_by_nm_id(db, nm_id, supplier_id)
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –∏–∑ WB API
            if not vendor_code:
                product_data = await self.parser.get_product_details(nm_id)
                vendor_code = product_data.get("vendorCode") if product_data else None
            display_code = vendor_code or nm_id
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"supplier_{supplier_id}_current")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            if price is None:
                # –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ –±–∞–∑—ã
                from models.shop import PriceHistory
                async with AsyncSessionLocal() as db:
                    result = await db.execute(
                        select(PriceHistory).where(
                            PriceHistory.nm_id == nm_id,
                            PriceHistory.shop_id == supplier_id
                        ).order_by(PriceHistory.price_date.desc())
                    )
                    latest = result.scalars().first()
                    if latest:
                        price = latest.new_price / 100
                        price_wallet = int(price * 0.98)
                        price_str = f"{int(price):,}".replace(",", " ")
                        price_wallet_str = f"{price_wallet}".replace(",", " ")
                        text = f"üì¶ –¢–æ–≤–∞—Ä: {display_code}\nüíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–ø–æ –¥–∞–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞): {price_str} ‚ÇΩ\nüí≥ –° WB –∫–æ—à–µ–ª—å–∫–æ–º: {price_wallet_str} ‚ÇΩ"
                        try:
                            await update.callback_query.edit_message_text(
                                text,
                                reply_markup=reply_markup
                            )
                        except Exception as e:
                            if "Message is not modified" in str(e):
                                await update.callback_query.answer()
                            else:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {e}")
                                await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã")
                        return
                try:
                    await update.callback_query.edit_message_text(
                        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {display_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    if "Message is not modified" in str(e):
                        await update.callback_query.answer()
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {e}")
                        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã")
                return
            price_str = f"{int(price):,}".replace(",", " ")
            price_wallet_str = f"{price_wallet}".replace(",", " ")
            text = f"üì¶ –¢–æ–≤–∞—Ä: {display_code}\nüíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price_str} ‚ÇΩ\nüí≥ –° WB –∫–æ—à–µ–ª—å–∫–æ–º: {price_wallet_str} ‚ÇΩ"
            try:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=reply_markup
                )
            except Exception as e:
                if "Message is not modified" in str(e):
                    await update.callback_query.answer()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {e}")
                    await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã")
        except Exception as e:
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"supplier_{supplier_id}_current")]])
            )
    
    async def price_history_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω"""
        await self.show_suppliers_menu(update, context)
    
    async def monitor_prices_task(self, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ supplier_id –∏–∑ supplier_ids.py"""
        try:
            total_prices = 0
            async with AsyncSessionLocal() as db:
                for supplier_id, shop_name in SUPPLIERS.items():
                    try:
                        nm_ids = await self.parser.get_products_by_supplier_id(supplier_id)
                        for nm_id in nm_ids:
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å WB
                                current_price, _ = await fetch_wb_current_price(nm_id)
                                if current_price is None:
                                    continue
                                total_prices += 1
                                
                                # –ü–æ–ª—É—á–∞–µ–º vendorCode –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                                vendor_code = await self.get_vendor_code_by_nm_id(db, nm_id, supplier_id)
                                display_code = vendor_code or str(nm_id)
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–∞—Ä—Å–µ–Ω–Ω—É—é —Ü–µ–Ω—É
                                print(f"[Price] {shop_name} | {display_code} | {int(current_price)} ‚ÇΩ")
                                
                                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ –±–∞–∑—ã
                                from models.shop import PriceHistory
                                result = await db.execute(
                                    select(PriceHistory).where(
                                        PriceHistory.nm_id == nm_id,
                                        PriceHistory.shop_id == supplier_id
                                    ).order_by(PriceHistory.price_date.desc())
                                )
                                latest_price = result.scalars().first()
                                old_price = latest_price.new_price if latest_price else None
                                # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                                if old_price is not None and old_price != int(current_price):
                                    await self.send_price_change_notification(
                                        shop_name, display_code, old_price, int(current_price), display_code, nm_id, context
                                    )
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                                    from crud.shop import save_price_change_history
                                    await save_price_change_history(db, nm_id, supplier_id, old_price, int(current_price))
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
                                from crud.shop import add_price_history
                                await add_price_history(
                                    db, str(nm_id), supplier_id, nm_id, int(current_price), old_price
                                )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ {nm_id}: {e}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –º–∞–≥–∞–∑–∏–Ω–∞ {shop_name}: {e}")
            print(f"[Monitor] –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω: {total_prices} (–æ–∂–∏–¥–∞–ª–æ—Å—å 37)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω: {e}")

    async def send_price_change_notification(self, shop_name: str, vendor_code: str, old_price: int, new_price: int, product_name: str, nm_id: int, context):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ /start"""
        try:
            change = new_price - old_price
            change_str = f"{change:+,}".replace(",", " ")
            price_str = f"{new_price:,}".replace(",", " ")
            old_price_str = f"{old_price:,}".replace(",", " ")
            message = (
                f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã!\n\n"
                f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {shop_name}\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {vendor_code}\n"
                f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: {nm_id}\n"
                f"üíµ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price_str} ‚ÇΩ\n"
                f"üíµ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {price_str} ‚ÇΩ\n"
                f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_str} ‚ÇΩ\n\n"
                f"üîó –°—Å—ã–ª–∫–∞: https://www.wildberries.ru/catalog/{nm_id}/detail.aspx"
            )
            from models.telegram_user import TelegramUser
            from sqlalchemy import select
            async with AsyncSessionLocal() as db:
                result = await db.execute(select(TelegramUser.telegram_id))
                chat_ids = result.scalars().all()
                
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
                batch_size = 25  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ 25 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
                delay_between_batches = 1.1  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1.1 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–ª–∏–º–∏—Ç 30/—Å–µ–∫)
                
                print(f"[Notification] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {len(chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                
                for i in range(0, len(chat_ids), batch_size):
                    batch = chat_ids[i:i + batch_size]
                    tasks = []
                    
                    for chat_id in batch:
                        task = self._send_single_notification(context, chat_id, message)
                        tasks.append(task)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                    await asyncio.gather(*tasks, return_exceptions=True)
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á)
                    if i + batch_size < len(chat_ids):
                        await asyncio.sleep(delay_between_batches)
                
                print(f"[Notification] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def _send_single_notification(self, context, chat_id, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await context.bot.send_message(chat_id=chat_id, text=message)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –Ω–µ —Å–ø–∞–º–∏–º –ª–æ–≥
            if "bot was blocked" not in str(e).lower() and "chat not found" not in str(e).lower():
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è chat_id={chat_id}: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("menu", self.menu))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ JobQueue (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
        self.application.job_queue.run_repeating(self.monitor_prices_task, interval=900, first=10)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.application.run_polling()


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = PriceMonitorBot()

if __name__ == "__main__":
    bot.run() 